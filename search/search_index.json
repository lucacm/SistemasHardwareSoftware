{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sistemas Hardware-Software \u00b6 Bem vindo ao curso de Sistemas Hardware-Software 2021/2. Professor : Maciel Calebe Vidal Professor auxiliar : Antonio Deusany de Carvalho Junior Avalia\u00e7\u00e3o \u00b6 A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamento: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site Ver crit\u00e9rios de avalia\u00e7\u00e3o na aula 01","title":"Home"},{"location":"#sistemas-hardware-software","text":"Bem vindo ao curso de Sistemas Hardware-Software 2021/2. Professor : Maciel Calebe Vidal Professor auxiliar : Antonio Deusany de Carvalho Junior","title":"Sistemas Hardware-Software"},{"location":"#avaliacao","text":"A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamento: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site Ver crit\u00e9rios de avalia\u00e7\u00e3o na aula 01","title":"Avalia\u00e7\u00e3o"},{"location":"sobre/","text":"Aulas \u00b6 SEG 13:30 - 15:30 (h\u00edbrido) QUI 15:45 - 17:45 (remoto) Atendimento: SEG 09:00 - 10:30 (remoto) Entregas de Atividades \u00b6 Data in\u00edcio Atividade Como entregar Prazo 23/08 01 Bases e Sinais da aula 01 Blackboard (conte\u00fados/Atividades/ATV1) 30/08 13:30 11/09 02 Fun\u00e7\u00f5es Github Classroom ( https://classroom.github.com/a/m7kBdBQM ) 18/09 23:59 13/09 03 Condicionais e Fun\u00e7\u00f5es Seu reposit\u00f3rio do Github Classroom. Ver enunciado https://github.com/insper-classroom/21_2_sishard_entrega_atividades_template/tree/main/03-condicionais-funcoes 20/09 23:59 Provas \u00b6 Labs de C: ocorreu 20/08. AI: a ser definido AF: a ser definido SUB: a ser definido","title":"Entregas e Prazos"},{"location":"sobre/#aulas","text":"SEG 13:30 - 15:30 (h\u00edbrido) QUI 15:45 - 17:45 (remoto) Atendimento: SEG 09:00 - 10:30 (remoto)","title":"Aulas"},{"location":"sobre/#entregas-de-atividades","text":"Data in\u00edcio Atividade Como entregar Prazo 23/08 01 Bases e Sinais da aula 01 Blackboard (conte\u00fados/Atividades/ATV1) 30/08 13:30 11/09 02 Fun\u00e7\u00f5es Github Classroom ( https://classroom.github.com/a/m7kBdBQM ) 18/09 23:59 13/09 03 Condicionais e Fun\u00e7\u00f5es Seu reposit\u00f3rio do Github Classroom. Ver enunciado https://github.com/insper-classroom/21_2_sishard_entrega_atividades_template/tree/main/03-condicionais-funcoes 20/09 23:59","title":"Entregas de Atividades"},{"location":"sobre/#provas","text":"Labs de C: ocorreu 20/08. AI: a ser definido AF: a ser definido SUB: a ser definido","title":"Provas"},{"location":"aulas/01-inteiros/","text":"01 - Inteiros na CPU \u00b6 Os exerc\u00edcios da aula de hoje est\u00e3o no execut\u00e1vel bases_e_sinais . Aula com atividade para entrega! Nesta atividade, \u00e9 esperado que voc\u00ea realize diversas convers\u00f5es entre bases. O que voc\u00ea precisa fazer \u00e9: 1. Rodar programa bases_e_sinais 2. Colocar sua solu\u00e7\u00e3o em solucoes.txt 3. Verificar se tudo est\u00e1 ok rodando (a saida final do programa \u00e9 Exerc\u00edcio correto! ) Ent\u00e3o, quando o execut\u00e1vel bases_e_sinais for chamado com bases_e_sinais < solucoes.txt o esperado \u00e9 que seja obitido na sa\u00edda o texto Exerc\u00edcio correto! . Assim, tudo est\u00e1 Ok e a entrega deve ser apenas do arquivo solucoes.txt na ATV1 do Blackboard. Voc\u00ea deve entregar apenas o arquivo solucoes.txt Example Veja no reposit\u00f3rio da disciplina, na pasta da aula 01 um arquivo chamado exemplo_entrega.txt . Ele est\u00e1 com o usu\u00e1rio do professor (quando voc\u00ea adicionar o seu, os n\u00fameros solicitados ser\u00e3o diferentes!). Utilize este arquivo para verificar o formato das respostas esperadas para cada transforma\u00e7\u00e3o. bases_e_sinais < exemplo_entrega.txt Boa atividade!","title":"01 - Inteiros na CPU"},{"location":"aulas/01-inteiros/#01-inteiros-na-cpu","text":"Os exerc\u00edcios da aula de hoje est\u00e3o no execut\u00e1vel bases_e_sinais . Aula com atividade para entrega! Nesta atividade, \u00e9 esperado que voc\u00ea realize diversas convers\u00f5es entre bases. O que voc\u00ea precisa fazer \u00e9: 1. Rodar programa bases_e_sinais 2. Colocar sua solu\u00e7\u00e3o em solucoes.txt 3. Verificar se tudo est\u00e1 ok rodando (a saida final do programa \u00e9 Exerc\u00edcio correto! ) Ent\u00e3o, quando o execut\u00e1vel bases_e_sinais for chamado com bases_e_sinais < solucoes.txt o esperado \u00e9 que seja obitido na sa\u00edda o texto Exerc\u00edcio correto! . Assim, tudo est\u00e1 Ok e a entrega deve ser apenas do arquivo solucoes.txt na ATV1 do Blackboard. Voc\u00ea deve entregar apenas o arquivo solucoes.txt Example Veja no reposit\u00f3rio da disciplina, na pasta da aula 01 um arquivo chamado exemplo_entrega.txt . Ele est\u00e1 com o usu\u00e1rio do professor (quando voc\u00ea adicionar o seu, os n\u00fameros solicitados ser\u00e3o diferentes!). Utilize este arquivo para verificar o formato das respostas esperadas para cada transforma\u00e7\u00e3o. bases_e_sinais < exemplo_entrega.txt Boa atividade!","title":"01 - Inteiros na CPU"},{"location":"aulas/02-ram/","text":"02 - Representa\u00e7\u00e3o de dados em RAM \u00b6 Experimentos \u00b6 Vamos trabalhar com os arquivos experimento0-4.c . Compile e execute cada um deles e coloque suas sa\u00eddas abaixo. Comente os resultados comparando os valores das constantes no c\u00f3digo em C e a sa\u00edda dos programas. Question Examine o c\u00f3digo C do arquivo experimento0.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento1.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento2.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento3.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento4.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Representa\u00e7\u00e3o de struct em RAM \u00b6 A utiliza\u00e7\u00e3o de struct junta tudo que j\u00e1 vimos sobre representa\u00e7\u00e3o de todos os tipos de dados na mem\u00f3ria. N\u00e3o se esque\u00e7a de levar em conta as quest\u00f5es de alinhamento mostradas na parte expositiva da aula. Warning Voc\u00ea n\u00e3o dever\u00e1 abrir o c\u00f3digo de parte1.c . Ele est\u00e1 no reposit\u00f3rio para voc\u00ea poder conferir suas respostas. Example Compile e execute parte1.c . Example Os endere\u00e7os mostrados na sa\u00edda de parte1 pertencem a um s\u00f3 struct declarado como struct player one . Quais s\u00e3o os tamanhos de cada campo? Dica : pode n\u00e3o ser poss\u00edvel identificar exatamente o tamanho de cada campo, mas \u00e9 esperado que voc\u00ea identifique ao menos o tamanho m\u00e1ximo de cada um. Example A segunda parte da sa\u00edda de parte1 mostra os endere\u00e7os de cada campo do struct. Note que &one e &one.icon s\u00e3o iguais. Voc\u00ea consegue explicar por que? Se n\u00e3o, volte na aula expositiva e reveja a parte sobre struct e alinhamento de mem\u00f3ria. Question Baseado nas respostas acima, declare abaixo o struct . Escreva-o da mesma maneira que usaria em um programa em C . Confira suas respostas com parte1.c . Examinando a execu\u00e7\u00e3o de programas usando gdb \u00b6 Podemos examinar um programa durante sua execu\u00e7\u00e3o usando o gdb . Podemos parar em qualquer instru\u00e7\u00e3o do programa, examinar conte\u00fado de registradores e da mem\u00f3ria e listar todos os s\u00edmbolos dispon\u00edveis (que podem ser fun\u00e7\u00f5es ou vari\u00e1veis globais). Example Para compilar um programa com suporte a debugging usamos a flag -g do gcc $> gcc -g -Wall -pedantic exemplo1.c Siga os passos abaixo para para carregar um programa usando o gdb . Lance o gdb e passe para ele seu programa: $> gdb ./exemplo1 Isto nos colocar\u00e1 em um prompt esperando comandos. Para rodar o programa at\u00e9 o fim execute (gdb) run Para sair, (gdb) quit Tip O gdb \u00e9 uma ferramenta poderosa que possui muitas op\u00e7\u00f5es. Sua documenta\u00e7\u00e3o est\u00e1 online e pode ser vista em https://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top . Nesta primeira parte iremos abrir o arquivo parte2.c e olhar seu conte\u00fado. Tamb\u00e9m executaremos o programa compilado parte2 . Question Abra o c\u00f3digo parte2.c e liste os nomes das vari\u00e1veis globais declaradas e seus tamanhos. Anote tamb\u00e9m as fun\u00e7\u00f5es declaradas. Question O comando info mostra informa\u00e7\u00f5es que podem ser obtidas a partir de um execut\u00e1vel. Execute-o e veja o que acontece. Example Use info para mostrar as fun\u00e7\u00f5es e vari\u00e1veis globais que existem em parte2 . Warning Muitos dos nomes s\u00e3o estranhos. Eles fazem parte do padr\u00e3o de arquivos execut\u00e1veis ELF , que cont\u00e9m informa\u00e7\u00f5es espec\u00edficas do sistema operacional usado. Voc\u00ea n\u00e3o precisa se preocupar com estes nomes. Question Qual \u00e9 o significado da primeira coluna do comando info variables ? Dica : o valor est\u00e1 em hexadecimal, que usamos na expositiva para mostrar ponteiros. Example Podemos usar o comando print para mostrar o valor inicial das vari\u00e1veis globais identificadas. Mostre o valor inicial de global_var usando este comando e compare com o visto no arquivo parte2.c . Dicas: Pode n\u00e3o funcionar de primeira. O qu\u00ea a mensagem de erro diz? A sintaxe de convers\u00e3o de tipos de C ( casting ) pode ser \u00fatil aqui. Example Podemos usar o gdb tamb\u00e9m para examinar a mem\u00f3ria de um execut\u00e1vel. Acesse esta p\u00e1gina da documenta\u00e7\u00e3o , entenda como usar o comando x e escreva abaixo qual o comando usado para mostrar o conte\u00fado do segundo item do vetor global_array . Em seguida, teste-o e verifique que ele funcionou corretamente. Dicas : volte nos exerc\u00edcios anteriores e encontre o endere\u00e7o do in\u00edcio do vetor calcule o endere\u00e7o do segundo elemento manualmente e passe para o comando x n\u00e3o se esque\u00e7a de buscar na mem\u00f3ria o tamanho correto do elemento Example global_array tem tipo short . Ou seja, \u00e9 formado por dois bytes. Mostre agora o conte\u00fado de cada um deles. Ou seja, voc\u00ea dever\u00e1 dar dois comandos para examinar a mem\u00f3ria. Explique como converter esses dois bytes para o valor mostrado no exerc\u00edcio anterior. Example Use agora o comando x para exibir global_str como uma string . Escreva o comando abaixo.","title":"02 - Representa\u00e7\u00e3o de dados em RAM"},{"location":"aulas/02-ram/#02-representacao-de-dados-em-ram","text":"","title":"02 - Representa\u00e7\u00e3o de dados em RAM"},{"location":"aulas/02-ram/#experimentos","text":"Vamos trabalhar com os arquivos experimento0-4.c . Compile e execute cada um deles e coloque suas sa\u00eddas abaixo. Comente os resultados comparando os valores das constantes no c\u00f3digo em C e a sa\u00edda dos programas. Question Examine o c\u00f3digo C do arquivo experimento0.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento1.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento2.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento3.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento4.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa.","title":"Experimentos"},{"location":"aulas/02-ram/#representacao-de-struct-em-ram","text":"A utiliza\u00e7\u00e3o de struct junta tudo que j\u00e1 vimos sobre representa\u00e7\u00e3o de todos os tipos de dados na mem\u00f3ria. N\u00e3o se esque\u00e7a de levar em conta as quest\u00f5es de alinhamento mostradas na parte expositiva da aula. Warning Voc\u00ea n\u00e3o dever\u00e1 abrir o c\u00f3digo de parte1.c . Ele est\u00e1 no reposit\u00f3rio para voc\u00ea poder conferir suas respostas. Example Compile e execute parte1.c . Example Os endere\u00e7os mostrados na sa\u00edda de parte1 pertencem a um s\u00f3 struct declarado como struct player one . Quais s\u00e3o os tamanhos de cada campo? Dica : pode n\u00e3o ser poss\u00edvel identificar exatamente o tamanho de cada campo, mas \u00e9 esperado que voc\u00ea identifique ao menos o tamanho m\u00e1ximo de cada um. Example A segunda parte da sa\u00edda de parte1 mostra os endere\u00e7os de cada campo do struct. Note que &one e &one.icon s\u00e3o iguais. Voc\u00ea consegue explicar por que? Se n\u00e3o, volte na aula expositiva e reveja a parte sobre struct e alinhamento de mem\u00f3ria. Question Baseado nas respostas acima, declare abaixo o struct . Escreva-o da mesma maneira que usaria em um programa em C . Confira suas respostas com parte1.c .","title":"Representa\u00e7\u00e3o de struct em RAM"},{"location":"aulas/02-ram/#examinando-a-execucao-de-programas-usando-gdb","text":"Podemos examinar um programa durante sua execu\u00e7\u00e3o usando o gdb . Podemos parar em qualquer instru\u00e7\u00e3o do programa, examinar conte\u00fado de registradores e da mem\u00f3ria e listar todos os s\u00edmbolos dispon\u00edveis (que podem ser fun\u00e7\u00f5es ou vari\u00e1veis globais). Example Para compilar um programa com suporte a debugging usamos a flag -g do gcc $> gcc -g -Wall -pedantic exemplo1.c Siga os passos abaixo para para carregar um programa usando o gdb . Lance o gdb e passe para ele seu programa: $> gdb ./exemplo1 Isto nos colocar\u00e1 em um prompt esperando comandos. Para rodar o programa at\u00e9 o fim execute (gdb) run Para sair, (gdb) quit Tip O gdb \u00e9 uma ferramenta poderosa que possui muitas op\u00e7\u00f5es. Sua documenta\u00e7\u00e3o est\u00e1 online e pode ser vista em https://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top . Nesta primeira parte iremos abrir o arquivo parte2.c e olhar seu conte\u00fado. Tamb\u00e9m executaremos o programa compilado parte2 . Question Abra o c\u00f3digo parte2.c e liste os nomes das vari\u00e1veis globais declaradas e seus tamanhos. Anote tamb\u00e9m as fun\u00e7\u00f5es declaradas. Question O comando info mostra informa\u00e7\u00f5es que podem ser obtidas a partir de um execut\u00e1vel. Execute-o e veja o que acontece. Example Use info para mostrar as fun\u00e7\u00f5es e vari\u00e1veis globais que existem em parte2 . Warning Muitos dos nomes s\u00e3o estranhos. Eles fazem parte do padr\u00e3o de arquivos execut\u00e1veis ELF , que cont\u00e9m informa\u00e7\u00f5es espec\u00edficas do sistema operacional usado. Voc\u00ea n\u00e3o precisa se preocupar com estes nomes. Question Qual \u00e9 o significado da primeira coluna do comando info variables ? Dica : o valor est\u00e1 em hexadecimal, que usamos na expositiva para mostrar ponteiros. Example Podemos usar o comando print para mostrar o valor inicial das vari\u00e1veis globais identificadas. Mostre o valor inicial de global_var usando este comando e compare com o visto no arquivo parte2.c . Dicas: Pode n\u00e3o funcionar de primeira. O qu\u00ea a mensagem de erro diz? A sintaxe de convers\u00e3o de tipos de C ( casting ) pode ser \u00fatil aqui. Example Podemos usar o gdb tamb\u00e9m para examinar a mem\u00f3ria de um execut\u00e1vel. Acesse esta p\u00e1gina da documenta\u00e7\u00e3o , entenda como usar o comando x e escreva abaixo qual o comando usado para mostrar o conte\u00fado do segundo item do vetor global_array . Em seguida, teste-o e verifique que ele funcionou corretamente. Dicas : volte nos exerc\u00edcios anteriores e encontre o endere\u00e7o do in\u00edcio do vetor calcule o endere\u00e7o do segundo elemento manualmente e passe para o comando x n\u00e3o se esque\u00e7a de buscar na mem\u00f3ria o tamanho correto do elemento Example global_array tem tipo short . Ou seja, \u00e9 formado por dois bytes. Mostre agora o conte\u00fado de cada um deles. Ou seja, voc\u00ea dever\u00e1 dar dois comandos para examinar a mem\u00f3ria. Explique como converter esses dois bytes para o valor mostrado no exerc\u00edcio anterior. Example Use agora o comando x para exibir global_str como uma string . Escreva o comando abaixo.","title":"Examinando a execu\u00e7\u00e3o de programas usando gdb"},{"location":"aulas/03-arquitetura-x86/","text":"03 - Arquitetura x86-64 \u00b6 No handout passado usamos o gdb para listar vari\u00e1veis globais, nomes de fun\u00e7\u00f5es e examinar endere\u00e7os de mem\u00f3ria. Neste handout vamos come\u00e7ar a usar o gdb tamb\u00e9m para examinar nossos programas durante sua execu\u00e7\u00e3o . Parando e continuando a execu\u00e7\u00e3o de um programa. \u00b6 Question Compile funcao1.c usando as flags da disciplina ( -Og -g -Wall -std=c99 ). Abra o execut\u00e1vel com o gdb e liste suas fun\u00e7\u00f5es e suas vari\u00e1veis globais. N\u00e3o rode o programa ainda! Anote abaixo seus endere\u00e7os e nomes. Example O comando disas \u00e9 usado para mostrar as instru\u00e7\u00f5es de m\u00e1quina de uma fun\u00e7\u00e3o. Use-o para ver o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao1 . Liste abaixo quais registradores foram usados nesta fun\u00e7\u00e3o e qual o tamanho dos dados guardados neles. Example Com base nos tamanhos identificados, voc\u00ea consegue associar os registradores acima com as vari\u00e1veis no c\u00f3digo de funcao1 ? Example Use o comando break funcao1 para parar a execu\u00e7\u00e3o do programa quando a fun\u00e7\u00e3o funcao1 come\u00e7ar a executar. Execute o programa usando run . O qu\u00ea ocorre? Example Podemos usar o comando info registers edi para ver o conte\u00fado atual do registrador %edi . Qual \u00e9 este valor? Verifique quais argumentos s\u00e3o passados para funcao1 no c\u00f3digo C e, com estas informa\u00e7\u00f5es em m\u00e3os, verifique sua resposta da Tarefa 2 e escreva abaixo suas novas conclus\u00f5es. Example O comando stepi executa exatamente uma instru\u00e7\u00e3o de m\u00e1quina. Use-o uma vez e execute novamente disas funcao1 . O que aconteceu? \u00c9 poss\u00edvel saber em qual instru\u00e7\u00e3o o programa est\u00e1 parado? Dicas : use disas de novo verifique novamente o conte\u00fado de %edi Example Cheque novamente o valor de %edi . Este valor condiz com a instru\u00e7\u00e3o executada? O que ela faz, exatamente? Question Use stepi para parar logo antes do retorno da fun\u00e7\u00e3o. Verifique o conte\u00fado do registrador %eax e compare-o com os prints feitos pelo program. Voc\u00ea consegue dizer seu uso? Example Vamos agora analisar o registrador %rsi . Toda vez que um registrador aparece entre ( ) estamos fazendo um acesso a mem\u00f3ria. Ao mostrar seu conte\u00fado usando info registers rsi recebemos o endere\u00e7o de mem\u00f3ria que cont\u00e9m o dado que queremos acessar. Example Use o comando x para mostrar, em decimal, o int que est\u00e1 armazenado no endere\u00e7o descoberto no exerc\u00edcio anterior. Confira seu resultado com o c\u00f3digo. Example Execute o comando continue para continuar rodando o programa. Ele ir\u00e1 rodar at\u00e9 que o pr\u00f3ximo breakpoint seja alcan\u00e7ado ou at\u00e9 que o programa termine. Endere\u00e7amento relativo e vari\u00e1veis globais \u00b6 Na parte anterior analisamos o c\u00f3digo Assembly de nossa primeira fun\u00e7\u00e3o e vimos como mostrar o c\u00f3digo fonte de uma fun\u00e7\u00e3o usando disas mostrar o conte\u00fado de um registrador usando info registers executar exatamente uma instru\u00e7\u00e3o usando stepi Tamb\u00e9m vimos que ao colocar um registrador entre ( ) estamos fazendo um acesso a mem\u00f3ria. Esta opera\u00e7\u00e3o \u00e9 equivalente a desreferenciar um ponteiro usando *p . Neste roteiro iremos adicionar um detalhe importante: podemos fazer contas com endere\u00e7os usando esta nota\u00e7\u00e3o. Nos exemplo abaixo nos referimos a mem\u00f3ria como um grande vetor de bytes unsigned char M[] . Ou seja, ao acessar M[%rax] , por exemplo, estamos acessando o lugar na mem\u00f3ria cujo endere\u00e7o est\u00e1 escrito em %rax . 10(%rax) : acessa a mem\u00f3ria M[%rax + 10] . (%rax, %rdi, 4) : acessa a mem\u00f3ria M[%rax + 4 * % rdi] . Note que isto se parece com aritm\u00e9tica de ponteiros cujo tipo apontado seja inteiro, pois os endere\u00e7os pulam de 4 em 4 bytes. Example Saia e abra o gdb novamente. Mostre o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao2 e coloque um breakpoint em sua primeira instru\u00e7\u00e3o. Example Execute agora o programa. A execu\u00e7\u00e3o deve ter parado no in\u00edcio de funcao2 . Rode disas funcao2 . Question Voc\u00ea consegue identificar acessos a mem\u00f3ria em funcao2 ? Quais s\u00e3o de leitura e quais s\u00e3o de escrita? Qual o tamanho dos dados lidos/escritos? Question Qual o significado do registrador %rip ? Se n\u00e3o se lembrar reveja os slides. O tipo de acesso a mem\u00f3ria que estamos realizando se chama rip relative addressing . Este tipo de acesso \u00e9 reservado para vari\u00e1veis globais e dados somente leitura. Estes dados tem uma caracter\u00edstica especial: eles s\u00e3o copiados para a mem\u00f3ria seguindo o mesmo layout do arquivo execut\u00e1vel. Ou seja, as posi\u00e7\u00f5es relativas entre o c\u00f3digo e os dados globais s\u00e3o fixas. Question Anote abaixo o ende\u00e7o das fun\u00e7\u00f5es MOV que utilizam este acesso. Baseado nos exemplos acima, descubra o endere\u00e7o das vari\u00e1veis acessadas. Desenho de acesso a mem\u00f3ria usando %rip A figura abaixo ilustra como funciona o endere\u00e7amento usando o registrador %rip . Note que os deslocamentos s\u00e3o diferentes pois o endere\u00e7o da instru\u00e7\u00e3o atual \u00e9 diferente. Por\u00e9m, o resultado final do endere\u00e7o calculado em ambas instru\u00e7\u00f5es \u00e9 o mesmo, indicando que ambas se referem ao mesmo local na mem\u00f3ria. Example Confira se o valor identificado na quest\u00e3o anterior \u00e9 o mesmo mostrado a direita das instru\u00e7\u00f5es MOV na sa\u00edda do disas . O gdb j\u00e1 calcula este endere\u00e7o para facilitar nossa vida, mas \u00e9 interessante calcular isto manualmente uma vez para entender melhor o processo. Question Use o comando continue para continuar o programa. Voc\u00ea deve estar agora na segunda execu\u00e7\u00e3o de funcao2 . Use o comando x para mostrar o valor armazenado na mem\u00f3ria calculada acima. Lendo o c\u00f3digo do programa, voc\u00ea consegue dizer qual vari\u00e1vel \u00e9 armazenada neste endere\u00e7o? O valor atual \u00e9 o esperado para a segunda execu\u00e7\u00e3o de funcao2 ? Al\u00e9m de poder mostrar valores na mem\u00f3ria podemos escrever valores tamb\u00e9m. A sintaxe usada \u00e9 a seguinte: set *( (tipo *) 0x.....) = valor onde devemos substituir tipo por um tipo b\u00e1sico de C , 0x... pelo endere\u00e7o desejado e valor pelo valor que queremos escrever. Note que o que estamos fazendo \u00e9 um cast do endere\u00e7o 0x.... para um ponteiro de tipo e depois estamos acessando o valor apontado usando * ! Question Escreva o valor -10 na mem\u00f3ria da vari\u00e1vel global usada em funcao2 . Rode o programa at\u00e9 o fim. O resultado foi o esperado? Escreva abaixo os comandos utilizados. Desafio Localize na fun\u00e7\u00e3o main as chamadas ao comando printf . Encontre ent\u00e3o o endere\u00e7o das strings de formata\u00e7\u00e3o e use o comando x para mostr\u00e1-las no gdb. Escreva os comandos usados abaixo.","title":"03 - Arquitetura x86-64"},{"location":"aulas/03-arquitetura-x86/#03-arquitetura-x86-64","text":"No handout passado usamos o gdb para listar vari\u00e1veis globais, nomes de fun\u00e7\u00f5es e examinar endere\u00e7os de mem\u00f3ria. Neste handout vamos come\u00e7ar a usar o gdb tamb\u00e9m para examinar nossos programas durante sua execu\u00e7\u00e3o .","title":"03 - Arquitetura x86-64"},{"location":"aulas/03-arquitetura-x86/#parando-e-continuando-a-execucao-de-um-programa","text":"Question Compile funcao1.c usando as flags da disciplina ( -Og -g -Wall -std=c99 ). Abra o execut\u00e1vel com o gdb e liste suas fun\u00e7\u00f5es e suas vari\u00e1veis globais. N\u00e3o rode o programa ainda! Anote abaixo seus endere\u00e7os e nomes. Example O comando disas \u00e9 usado para mostrar as instru\u00e7\u00f5es de m\u00e1quina de uma fun\u00e7\u00e3o. Use-o para ver o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao1 . Liste abaixo quais registradores foram usados nesta fun\u00e7\u00e3o e qual o tamanho dos dados guardados neles. Example Com base nos tamanhos identificados, voc\u00ea consegue associar os registradores acima com as vari\u00e1veis no c\u00f3digo de funcao1 ? Example Use o comando break funcao1 para parar a execu\u00e7\u00e3o do programa quando a fun\u00e7\u00e3o funcao1 come\u00e7ar a executar. Execute o programa usando run . O qu\u00ea ocorre? Example Podemos usar o comando info registers edi para ver o conte\u00fado atual do registrador %edi . Qual \u00e9 este valor? Verifique quais argumentos s\u00e3o passados para funcao1 no c\u00f3digo C e, com estas informa\u00e7\u00f5es em m\u00e3os, verifique sua resposta da Tarefa 2 e escreva abaixo suas novas conclus\u00f5es. Example O comando stepi executa exatamente uma instru\u00e7\u00e3o de m\u00e1quina. Use-o uma vez e execute novamente disas funcao1 . O que aconteceu? \u00c9 poss\u00edvel saber em qual instru\u00e7\u00e3o o programa est\u00e1 parado? Dicas : use disas de novo verifique novamente o conte\u00fado de %edi Example Cheque novamente o valor de %edi . Este valor condiz com a instru\u00e7\u00e3o executada? O que ela faz, exatamente? Question Use stepi para parar logo antes do retorno da fun\u00e7\u00e3o. Verifique o conte\u00fado do registrador %eax e compare-o com os prints feitos pelo program. Voc\u00ea consegue dizer seu uso? Example Vamos agora analisar o registrador %rsi . Toda vez que um registrador aparece entre ( ) estamos fazendo um acesso a mem\u00f3ria. Ao mostrar seu conte\u00fado usando info registers rsi recebemos o endere\u00e7o de mem\u00f3ria que cont\u00e9m o dado que queremos acessar. Example Use o comando x para mostrar, em decimal, o int que est\u00e1 armazenado no endere\u00e7o descoberto no exerc\u00edcio anterior. Confira seu resultado com o c\u00f3digo. Example Execute o comando continue para continuar rodando o programa. Ele ir\u00e1 rodar at\u00e9 que o pr\u00f3ximo breakpoint seja alcan\u00e7ado ou at\u00e9 que o programa termine.","title":"Parando e continuando a execu\u00e7\u00e3o de um programa."},{"location":"aulas/03-arquitetura-x86/#enderecamento-relativo-e-variaveis-globais","text":"Na parte anterior analisamos o c\u00f3digo Assembly de nossa primeira fun\u00e7\u00e3o e vimos como mostrar o c\u00f3digo fonte de uma fun\u00e7\u00e3o usando disas mostrar o conte\u00fado de um registrador usando info registers executar exatamente uma instru\u00e7\u00e3o usando stepi Tamb\u00e9m vimos que ao colocar um registrador entre ( ) estamos fazendo um acesso a mem\u00f3ria. Esta opera\u00e7\u00e3o \u00e9 equivalente a desreferenciar um ponteiro usando *p . Neste roteiro iremos adicionar um detalhe importante: podemos fazer contas com endere\u00e7os usando esta nota\u00e7\u00e3o. Nos exemplo abaixo nos referimos a mem\u00f3ria como um grande vetor de bytes unsigned char M[] . Ou seja, ao acessar M[%rax] , por exemplo, estamos acessando o lugar na mem\u00f3ria cujo endere\u00e7o est\u00e1 escrito em %rax . 10(%rax) : acessa a mem\u00f3ria M[%rax + 10] . (%rax, %rdi, 4) : acessa a mem\u00f3ria M[%rax + 4 * % rdi] . Note que isto se parece com aritm\u00e9tica de ponteiros cujo tipo apontado seja inteiro, pois os endere\u00e7os pulam de 4 em 4 bytes. Example Saia e abra o gdb novamente. Mostre o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao2 e coloque um breakpoint em sua primeira instru\u00e7\u00e3o. Example Execute agora o programa. A execu\u00e7\u00e3o deve ter parado no in\u00edcio de funcao2 . Rode disas funcao2 . Question Voc\u00ea consegue identificar acessos a mem\u00f3ria em funcao2 ? Quais s\u00e3o de leitura e quais s\u00e3o de escrita? Qual o tamanho dos dados lidos/escritos? Question Qual o significado do registrador %rip ? Se n\u00e3o se lembrar reveja os slides. O tipo de acesso a mem\u00f3ria que estamos realizando se chama rip relative addressing . Este tipo de acesso \u00e9 reservado para vari\u00e1veis globais e dados somente leitura. Estes dados tem uma caracter\u00edstica especial: eles s\u00e3o copiados para a mem\u00f3ria seguindo o mesmo layout do arquivo execut\u00e1vel. Ou seja, as posi\u00e7\u00f5es relativas entre o c\u00f3digo e os dados globais s\u00e3o fixas. Question Anote abaixo o ende\u00e7o das fun\u00e7\u00f5es MOV que utilizam este acesso. Baseado nos exemplos acima, descubra o endere\u00e7o das vari\u00e1veis acessadas. Desenho de acesso a mem\u00f3ria usando %rip A figura abaixo ilustra como funciona o endere\u00e7amento usando o registrador %rip . Note que os deslocamentos s\u00e3o diferentes pois o endere\u00e7o da instru\u00e7\u00e3o atual \u00e9 diferente. Por\u00e9m, o resultado final do endere\u00e7o calculado em ambas instru\u00e7\u00f5es \u00e9 o mesmo, indicando que ambas se referem ao mesmo local na mem\u00f3ria. Example Confira se o valor identificado na quest\u00e3o anterior \u00e9 o mesmo mostrado a direita das instru\u00e7\u00f5es MOV na sa\u00edda do disas . O gdb j\u00e1 calcula este endere\u00e7o para facilitar nossa vida, mas \u00e9 interessante calcular isto manualmente uma vez para entender melhor o processo. Question Use o comando continue para continuar o programa. Voc\u00ea deve estar agora na segunda execu\u00e7\u00e3o de funcao2 . Use o comando x para mostrar o valor armazenado na mem\u00f3ria calculada acima. Lendo o c\u00f3digo do programa, voc\u00ea consegue dizer qual vari\u00e1vel \u00e9 armazenada neste endere\u00e7o? O valor atual \u00e9 o esperado para a segunda execu\u00e7\u00e3o de funcao2 ? Al\u00e9m de poder mostrar valores na mem\u00f3ria podemos escrever valores tamb\u00e9m. A sintaxe usada \u00e9 a seguinte: set *( (tipo *) 0x.....) = valor onde devemos substituir tipo por um tipo b\u00e1sico de C , 0x... pelo endere\u00e7o desejado e valor pelo valor que queremos escrever. Note que o que estamos fazendo \u00e9 um cast do endere\u00e7o 0x.... para um ponteiro de tipo e depois estamos acessando o valor apontado usando * ! Question Escreva o valor -10 na mem\u00f3ria da vari\u00e1vel global usada em funcao2 . Rode o programa at\u00e9 o fim. O resultado foi o esperado? Escreva abaixo os comandos utilizados. Desafio Localize na fun\u00e7\u00e3o main as chamadas ao comando printf . Encontre ent\u00e3o o endere\u00e7o das strings de formata\u00e7\u00e3o e use o comando x para mostr\u00e1-las no gdb. Escreva os comandos usados abaixo.","title":"Endere\u00e7amento relativo e vari\u00e1veis globais"},{"location":"aulas/04-funcoes-mov/","text":"04 - Fun\u00e7\u00f5es \u00b6 Neste handout vamos trabalhar pela primeira vez na tradu\u00e7\u00e3o reversa de programas em Assembly para C . Nas \u00faltimas aulas vimos as instru\u00e7\u00f5es mov e add e na aula de hoje vimos uma tabela grande com as instru\u00e7\u00f5es aritm\u00e9ticas ( add , sub , mul , imul , div , etc). Como em todas as aulas, veremos hoje um detalhe a mais sobre arquitetura x64 : chamadas de fun\u00e7\u00f5es e argumentos. Fun\u00e7\u00f5es e seus argumentos \u00b6 Em x64 os argumentos das fun\u00e7\u00f5es s\u00e3o passados nos registradores e o valor de retorno \u00e9 colocado tamb\u00e9m em um registrador. Argumentos inteiros ou ponteiros s\u00e3o passados nos registradores ( nesta ordem ): %rdi %rsi %rdx %rcx %r8 %r9 Argumentos ponto flutuante s\u00e3o passados nos registradores %xmm0 at\u00e9 %xmm7 . Valores de retorno inteiros ou ponteiros s\u00e3o colocados no registrador %rax . Valores de retorno ponto flutuante s\u00e3o colocados no registrador %xmm0 . Para chamar fun\u00e7\u00f5es usamos a instru\u00e7\u00e3o call seguido do endere\u00e7o de mem\u00f3ria da fun\u00e7\u00e3o. O gdb cria um \"apelido\" para estes endere\u00e7os de mem\u00f3ria usando o nome original da fun\u00e7\u00e3o no arquivo .c . Assim, estas instru\u00e7\u00f5es s\u00e3o mostradas, normalmente, como call func1 , por exemplo. Note que antes de cada call devemos preencher os argumentos nos registradores corretos. Para retornar usamos a instru\u00e7\u00e3o ret . Ela \u00e9 equivalente ao comando return de C e devolver\u00e1 o valor armazenado no %rax (ou %xmm0 para ponto flutuante). N\u00e3o se esque\u00e7a da equival\u00eancia entre o tamanhos dos registradores e os tipos inteiros em C . Um resumo gr\u00e1fico pode ser visto nas figuras acima. 64 bits ( %rax , %rdi e outros que come\u00e7am com r ): long , unsigned long ou ponteiro; 32 bits ( %eax , %edi e outros que come\u00e7a com e e os que terminam em d como r10d ): int ou unsigned int ; 16 bits ( %ax , %di e outros com duas letras somente terminando em x ): short ou unsigned short 8 bits ( %al , %ah e outros com duas letras terminando em h ou l ): char ou unsigned char . Vamos agora praticar fazendo a tradu\u00e7\u00e3o de fun\u00e7\u00f5es que fazem aritm\u00e9tica simples entre inteiros (usando ou n\u00e3o ponteiros). O exemplo abaixo mostra todas as etapas que precisamos seguir para fazer a tradu\u00e7\u00e3o Assembly -> C. Exemplo guiado \u00b6 Dado o c\u00f3digo Assembly abaixo, fa\u00e7a sua tradu\u00e7\u00e3o para C 0000000000000000 <misterio1>: 0: 48 01 f7 add %rsi,%rdi 3: 48 8d 04 57 lea (%rdi,%rdx,2),%rax 7: c3 retq Assinatura da fun\u00e7\u00e3o \u00b6 Vamos come\u00e7ar pela assinatura da fun\u00e7\u00e3o. \u00c9 sempre \u00fatil identificar quais registradores s\u00e3o lidos antes de serem escritos. Isso nos ajuda a entender se um registrador \u00e9 um argumento da fun\u00e7\u00e3o ou se ele \u00e9 apenas usado como vari\u00e1vel local. Faremos isso escrevendo todos os registradores que podem ser argumentos em ordem e vendo se s\u00e3o lidos ou escritos primeiro: %rdi - lido primeiro ( add faz a opera\u00e7\u00e3o += ) %rsi - lido primeiro (no lado esquerdo do add ) %rdx - lido primeiro (no lado esquerdo do lea ) %rcx - n\u00e3o usado %r8 - n\u00e3o usado %r9 - n\u00e3o usado Logo, os registradores %rdi , %rsi e %rdx s\u00e3o argumentos da fun\u00e7\u00e3o. Consultando o box de arquitetura de computadores, vemos que a fun\u00e7\u00e3o recebe tr\u00eas argumentos do tipo long (pois usa os registradores de 64 bits). Note que o resultado das computa\u00e7\u00f5es \u00e9 guardado em %rax , que guarda sempre o retorno da fun\u00e7\u00e3o. Por usar a por\u00e7\u00e3o de 64 bits do registrador, o tipo de retorno tamb\u00e9m \u00e9 long . A assinatura da fun\u00e7\u00e3o \u00e9, portanto long misterio1(long a, long b, long c); Tip Ponteiros tamb\u00e9m usam os registradores de 64 bits. Por\u00e9m, olhando rapidamente o c\u00f3digo notamos que n\u00e3o h\u00e1 nenhum acesso a mem\u00f3ria. Logo, se trata realmente de long . O c\u00f3digo \u00b6 Vamos agora para o c\u00f3digo. Nossa primeira estrat\u00e9gia \u00e9 atribuir um nome para cada registrador. Os tr\u00eas registradores de argumentos j\u00e1 receberam os nomes a , b e c . Para deixar expl\u00edcito o papel do %rax vamos nome\u00e1-lo de retval . A primeira instru\u00e7\u00e3o add %rsi, %rdi realiza a adi\u00e7\u00e3o dos dois registradores e armazena em %rdi . Logo, sua tradu\u00e7\u00e3o direta seria: a += b ; A instru\u00e7\u00e3o lea (%rdi, %rdx, 2), %rax \u00e9 usada tanto para calcular endere\u00e7os de mem\u00f3ria quanto para aritm\u00e9tica simples. Vemos que \u00e9 o segundo caso pois, no c\u00f3digo seguinte, n\u00e3o acessamos a mem\u00f3ria com o valor calculado. Logo, podemos traduzir este trecho como retval = a + 2 * c ; Logo ap\u00f3s temos o ret , que \u00e9 traduzido como return retval ; Logo, nossa fun\u00e7\u00e3o \u00e9 traduzida como long misterio1 ( long a , long b , long c ){ long retval ; a += b ; retval = a + 2 * c ; return retval ; } Finalmente, podemos deixar nosso c\u00f3digo leg\u00edvel e escrev\u00ea-lo como long misterio1 ( long a , long b , long c ){ return a + b + 2 * c ; } Voc\u00ea pode verificar o c\u00f3digo original no arquivo exemplo1.c . O processo acima pode ser formalizado no seguinte algoritmo: Identifique quantos argumentos a fun\u00e7\u00e3o recebe Identifique os tipos de cada argumento (pode ser necess\u00e1rio olhar o c\u00f3digo assembly da fun\u00e7\u00e3o) D\u00ea um nome para cada registrador. Se um mesmo registrador \u00e9 usado com tamanhos diferentes ( %rdi e %edi s\u00e3o usados no c\u00f3digo), d\u00ea um nome diferente para cada tamanho. Fa\u00e7a a tradu\u00e7\u00e3o de cada instru\u00e7\u00e3o separadamente. Fique atento aos valores colocados em %rax e %eax perto do fim do c\u00f3digo. Esses valores ser\u00e3o retornados pela fun\u00e7\u00e3o. O c\u00f3digo gerado costuma ser ileg\u00edvel. Refatore-o para melhorar sua legibilidade. Tip A instru\u00e7\u00e3o lea pode ser usada tanto para aritm\u00e9tica quanto para c\u00e1lculo de endere\u00e7os. Para tirar a d\u00favida basta olhar se as pr\u00f3ximas instru\u00e7\u00f5es fazem acesso \u00e0 mem\u00f3ria com o endere\u00e7o calculado ou apenas usam o valor diretamente (aritm\u00e9tica). Os registradores de tamanhos menores s\u00e3o virtuais. Quanto escrevo em %ax estou escrevendo nos 16 bits menos significativos de %rax e de %eax tamb\u00e9m. Muitas instru\u00e7\u00f5es com operadores de 32bits zeram os 32bits superiores. Assim, vemos por exemplo a instru\u00e7\u00e3o mov $0, %eax sendo usada para zerar um long . Nesses casos \u00e9 necess\u00e1rio verificar se a fun\u00e7\u00e3o continua usando %eax (\u00e9 int mesmo) ou se ela magicamente passa a usar %rax (o tipo era long ). Pr\u00e1tica \u00b6 Vamos agora exercitar. Cada exerc\u00edcio faz um c\u00e1lculo diferente. Se houver alguma instru\u00e7\u00e3o desconhecida, pesquise-a no google para encontrar seu significado. Normalmente algo como \"asm x64 instruction\" + a instru\u00e7\u00e3o desconhecida d\u00e1 respostas corretas. Warning Usaremos o gdb para abrir os arquivos .o nesta aula. Este tipo de arquivo cont\u00e9m fun\u00e7\u00f5es compiladas, mas n\u00e3o \u00e9 um execut\u00e1vel completo por n\u00e3o ter uma fun\u00e7\u00e3o main . Arquivo ex1.o \u00b6 Question O c\u00f3digo abaixo foi retirado do arquivo ex1.o . Fa\u00e7a sua tradu\u00e7\u00e3o para C . 0000000000000000 <ex1>: 0: 89 f8 mov %edi,%eax 2: 29 f0 sub %esi,%eax 4: c3 retq Arquivo ex2.o \u00b6 Question Use o gdb para listar as fun\u00e7\u00f5es definidas em ex2.o e escreva-as abaixo. Question Fa\u00e7a a tradu\u00e7\u00e3o das fun\u00e7\u00f5es acima para C Arquivo ex3.o \u00b6 A fun\u00e7\u00e3o abaixo foi obtida de ex3.o . 0000000000000000 <ex3>: 0: 8b 06 mov (%rsi),%eax 2: 0f af c0 imul %eax,%eax 5: 89 07 mov %eax,(%rdi) 7: c3 retq Question O qu\u00ea faz a instru\u00e7\u00e3o imul ? Question Traduza esta fun\u00e7\u00e3o para C . Fique atento ao tamanho dos registradores usados para identificar o tamanho dos vari\u00e1veis inteiras. Antes de prosseguir, valide suas solu\u00e7\u00f5es da se\u00e7\u00e3o anterior com o professor. Vamos agora trabalhar com execut\u00e1veis \"completos\". Vamos analisar n\u00e3o somente o c\u00f3digo das fun\u00e7\u00f5es mas tamb\u00e9m sua chamada. Arquivo ex4 \u00b6 Example Use o gdb para obter o conte\u00fado das fun\u00e7\u00f5es main e ex4 . Dica : lembre-se do comando disas Localize a chamada da fun\u00e7\u00e3o ex4 no main. As intru\u00e7\u00f5es acima do call colocam os argumentos nos lugares corretos para ex4 rodar. Question Quantos argumentos a fun\u00e7\u00e3o recebe? Quais s\u00e3o seus valores? Question Traduza a fun\u00e7\u00e3o ex4 para C . Arquivo ex5 (desafio) \u00b6 Warning Este exerc\u00edcio \u00e9 avan\u00e7ado e necessita de pesquisa para ser realizado. Fa\u00e7a-o somente ap\u00f3s validar suas solu\u00e7\u00f5es dos anteriores com os professores. A resposta dele ser\u00e1 validada nos atendimentos. Neste exerc\u00edcio vamos nos aprofundar no uso de ponteiros. Vimos no ex3.o um exemplo de fun\u00e7\u00e3o que armazenava um valor calculado em um ponteiro. Agora veremos um exemplo completo que inclui a chamada de uma fun\u00e7\u00e3o recebendo um endere\u00e7o. O trecho abaixo copia os argumentos para os registradores corretos e chama a fun\u00e7\u00e3o. 60b: 48 8d 4c 24 08 lea 0x8(%rsp),%rcx 610: 48 8d 54 24 0c lea 0xc(%rsp),%rdx 615: be 03 00 00 00 mov $0x3,%esi 61a: bf 0a 00 00 00 mov $0xa,%edi 61f: e8 d6 ff ff ff callq 5fa <ex5> Question Identifique a partir dos tipos de dados colocados nos registradores qual o tipo dos argumentos da fun\u00e7\u00e3o. Question Qual s\u00e3o os endere\u00e7os passados para a fun\u00e7\u00e3o ex5 ? Escreva-os em fun\u00e7\u00e3o do registrador %rsp . Question Os endere\u00e7os acima s\u00e3o passados em quais registradores? Vamos agora ao c\u00f3digo de ex5 : 00000000000005fa <ex5>: 5fa: 89 f8 mov %edi,%eax 5fc: 48 89 d7 mov %rdx,%rdi 5ff: 99 cltd 600: f7 fe idiv %esi 602: 89 07 mov %eax,(%rdi) 604: 89 11 mov %edx,(%rcx) 606: c3 retq Question Como a instru\u00e7\u00e3o idiv funciona? Em quais registradores ela posiciona seu resultado? Em quais registradores ela espera a entrada? Question O qu\u00ea faz a instru\u00e7\u00e3o cltd ? Por qu\u00ea ela \u00e9 necess\u00e1ria? Question Fa\u00e7a a tradu\u00e7\u00e3o de ex5 para C .","title":"04 -  Fun\u00e7\u00f5es"},{"location":"aulas/04-funcoes-mov/#04-funcoes","text":"Neste handout vamos trabalhar pela primeira vez na tradu\u00e7\u00e3o reversa de programas em Assembly para C . Nas \u00faltimas aulas vimos as instru\u00e7\u00f5es mov e add e na aula de hoje vimos uma tabela grande com as instru\u00e7\u00f5es aritm\u00e9ticas ( add , sub , mul , imul , div , etc). Como em todas as aulas, veremos hoje um detalhe a mais sobre arquitetura x64 : chamadas de fun\u00e7\u00f5es e argumentos.","title":"04 -  Fun\u00e7\u00f5es"},{"location":"aulas/04-funcoes-mov/#funcoes-e-seus-argumentos","text":"Em x64 os argumentos das fun\u00e7\u00f5es s\u00e3o passados nos registradores e o valor de retorno \u00e9 colocado tamb\u00e9m em um registrador. Argumentos inteiros ou ponteiros s\u00e3o passados nos registradores ( nesta ordem ): %rdi %rsi %rdx %rcx %r8 %r9 Argumentos ponto flutuante s\u00e3o passados nos registradores %xmm0 at\u00e9 %xmm7 . Valores de retorno inteiros ou ponteiros s\u00e3o colocados no registrador %rax . Valores de retorno ponto flutuante s\u00e3o colocados no registrador %xmm0 . Para chamar fun\u00e7\u00f5es usamos a instru\u00e7\u00e3o call seguido do endere\u00e7o de mem\u00f3ria da fun\u00e7\u00e3o. O gdb cria um \"apelido\" para estes endere\u00e7os de mem\u00f3ria usando o nome original da fun\u00e7\u00e3o no arquivo .c . Assim, estas instru\u00e7\u00f5es s\u00e3o mostradas, normalmente, como call func1 , por exemplo. Note que antes de cada call devemos preencher os argumentos nos registradores corretos. Para retornar usamos a instru\u00e7\u00e3o ret . Ela \u00e9 equivalente ao comando return de C e devolver\u00e1 o valor armazenado no %rax (ou %xmm0 para ponto flutuante). N\u00e3o se esque\u00e7a da equival\u00eancia entre o tamanhos dos registradores e os tipos inteiros em C . Um resumo gr\u00e1fico pode ser visto nas figuras acima. 64 bits ( %rax , %rdi e outros que come\u00e7am com r ): long , unsigned long ou ponteiro; 32 bits ( %eax , %edi e outros que come\u00e7a com e e os que terminam em d como r10d ): int ou unsigned int ; 16 bits ( %ax , %di e outros com duas letras somente terminando em x ): short ou unsigned short 8 bits ( %al , %ah e outros com duas letras terminando em h ou l ): char ou unsigned char . Vamos agora praticar fazendo a tradu\u00e7\u00e3o de fun\u00e7\u00f5es que fazem aritm\u00e9tica simples entre inteiros (usando ou n\u00e3o ponteiros). O exemplo abaixo mostra todas as etapas que precisamos seguir para fazer a tradu\u00e7\u00e3o Assembly -> C.","title":"Fun\u00e7\u00f5es e seus argumentos"},{"location":"aulas/04-funcoes-mov/#exemplo-guiado","text":"Dado o c\u00f3digo Assembly abaixo, fa\u00e7a sua tradu\u00e7\u00e3o para C 0000000000000000 <misterio1>: 0: 48 01 f7 add %rsi,%rdi 3: 48 8d 04 57 lea (%rdi,%rdx,2),%rax 7: c3 retq","title":"Exemplo guiado"},{"location":"aulas/04-funcoes-mov/#assinatura-da-funcao","text":"Vamos come\u00e7ar pela assinatura da fun\u00e7\u00e3o. \u00c9 sempre \u00fatil identificar quais registradores s\u00e3o lidos antes de serem escritos. Isso nos ajuda a entender se um registrador \u00e9 um argumento da fun\u00e7\u00e3o ou se ele \u00e9 apenas usado como vari\u00e1vel local. Faremos isso escrevendo todos os registradores que podem ser argumentos em ordem e vendo se s\u00e3o lidos ou escritos primeiro: %rdi - lido primeiro ( add faz a opera\u00e7\u00e3o += ) %rsi - lido primeiro (no lado esquerdo do add ) %rdx - lido primeiro (no lado esquerdo do lea ) %rcx - n\u00e3o usado %r8 - n\u00e3o usado %r9 - n\u00e3o usado Logo, os registradores %rdi , %rsi e %rdx s\u00e3o argumentos da fun\u00e7\u00e3o. Consultando o box de arquitetura de computadores, vemos que a fun\u00e7\u00e3o recebe tr\u00eas argumentos do tipo long (pois usa os registradores de 64 bits). Note que o resultado das computa\u00e7\u00f5es \u00e9 guardado em %rax , que guarda sempre o retorno da fun\u00e7\u00e3o. Por usar a por\u00e7\u00e3o de 64 bits do registrador, o tipo de retorno tamb\u00e9m \u00e9 long . A assinatura da fun\u00e7\u00e3o \u00e9, portanto long misterio1(long a, long b, long c); Tip Ponteiros tamb\u00e9m usam os registradores de 64 bits. Por\u00e9m, olhando rapidamente o c\u00f3digo notamos que n\u00e3o h\u00e1 nenhum acesso a mem\u00f3ria. Logo, se trata realmente de long .","title":"Assinatura da fun\u00e7\u00e3o"},{"location":"aulas/04-funcoes-mov/#o-codigo","text":"Vamos agora para o c\u00f3digo. Nossa primeira estrat\u00e9gia \u00e9 atribuir um nome para cada registrador. Os tr\u00eas registradores de argumentos j\u00e1 receberam os nomes a , b e c . Para deixar expl\u00edcito o papel do %rax vamos nome\u00e1-lo de retval . A primeira instru\u00e7\u00e3o add %rsi, %rdi realiza a adi\u00e7\u00e3o dos dois registradores e armazena em %rdi . Logo, sua tradu\u00e7\u00e3o direta seria: a += b ; A instru\u00e7\u00e3o lea (%rdi, %rdx, 2), %rax \u00e9 usada tanto para calcular endere\u00e7os de mem\u00f3ria quanto para aritm\u00e9tica simples. Vemos que \u00e9 o segundo caso pois, no c\u00f3digo seguinte, n\u00e3o acessamos a mem\u00f3ria com o valor calculado. Logo, podemos traduzir este trecho como retval = a + 2 * c ; Logo ap\u00f3s temos o ret , que \u00e9 traduzido como return retval ; Logo, nossa fun\u00e7\u00e3o \u00e9 traduzida como long misterio1 ( long a , long b , long c ){ long retval ; a += b ; retval = a + 2 * c ; return retval ; } Finalmente, podemos deixar nosso c\u00f3digo leg\u00edvel e escrev\u00ea-lo como long misterio1 ( long a , long b , long c ){ return a + b + 2 * c ; } Voc\u00ea pode verificar o c\u00f3digo original no arquivo exemplo1.c . O processo acima pode ser formalizado no seguinte algoritmo: Identifique quantos argumentos a fun\u00e7\u00e3o recebe Identifique os tipos de cada argumento (pode ser necess\u00e1rio olhar o c\u00f3digo assembly da fun\u00e7\u00e3o) D\u00ea um nome para cada registrador. Se um mesmo registrador \u00e9 usado com tamanhos diferentes ( %rdi e %edi s\u00e3o usados no c\u00f3digo), d\u00ea um nome diferente para cada tamanho. Fa\u00e7a a tradu\u00e7\u00e3o de cada instru\u00e7\u00e3o separadamente. Fique atento aos valores colocados em %rax e %eax perto do fim do c\u00f3digo. Esses valores ser\u00e3o retornados pela fun\u00e7\u00e3o. O c\u00f3digo gerado costuma ser ileg\u00edvel. Refatore-o para melhorar sua legibilidade. Tip A instru\u00e7\u00e3o lea pode ser usada tanto para aritm\u00e9tica quanto para c\u00e1lculo de endere\u00e7os. Para tirar a d\u00favida basta olhar se as pr\u00f3ximas instru\u00e7\u00f5es fazem acesso \u00e0 mem\u00f3ria com o endere\u00e7o calculado ou apenas usam o valor diretamente (aritm\u00e9tica). Os registradores de tamanhos menores s\u00e3o virtuais. Quanto escrevo em %ax estou escrevendo nos 16 bits menos significativos de %rax e de %eax tamb\u00e9m. Muitas instru\u00e7\u00f5es com operadores de 32bits zeram os 32bits superiores. Assim, vemos por exemplo a instru\u00e7\u00e3o mov $0, %eax sendo usada para zerar um long . Nesses casos \u00e9 necess\u00e1rio verificar se a fun\u00e7\u00e3o continua usando %eax (\u00e9 int mesmo) ou se ela magicamente passa a usar %rax (o tipo era long ).","title":"O c\u00f3digo"},{"location":"aulas/04-funcoes-mov/#pratica","text":"Vamos agora exercitar. Cada exerc\u00edcio faz um c\u00e1lculo diferente. Se houver alguma instru\u00e7\u00e3o desconhecida, pesquise-a no google para encontrar seu significado. Normalmente algo como \"asm x64 instruction\" + a instru\u00e7\u00e3o desconhecida d\u00e1 respostas corretas. Warning Usaremos o gdb para abrir os arquivos .o nesta aula. Este tipo de arquivo cont\u00e9m fun\u00e7\u00f5es compiladas, mas n\u00e3o \u00e9 um execut\u00e1vel completo por n\u00e3o ter uma fun\u00e7\u00e3o main .","title":"Pr\u00e1tica"},{"location":"aulas/04-funcoes-mov/#arquivo-ex1o","text":"Question O c\u00f3digo abaixo foi retirado do arquivo ex1.o . Fa\u00e7a sua tradu\u00e7\u00e3o para C . 0000000000000000 <ex1>: 0: 89 f8 mov %edi,%eax 2: 29 f0 sub %esi,%eax 4: c3 retq","title":"Arquivo ex1.o"},{"location":"aulas/04-funcoes-mov/#arquivo-ex2o","text":"Question Use o gdb para listar as fun\u00e7\u00f5es definidas em ex2.o e escreva-as abaixo. Question Fa\u00e7a a tradu\u00e7\u00e3o das fun\u00e7\u00f5es acima para C","title":"Arquivo ex2.o"},{"location":"aulas/04-funcoes-mov/#arquivo-ex3o","text":"A fun\u00e7\u00e3o abaixo foi obtida de ex3.o . 0000000000000000 <ex3>: 0: 8b 06 mov (%rsi),%eax 2: 0f af c0 imul %eax,%eax 5: 89 07 mov %eax,(%rdi) 7: c3 retq Question O qu\u00ea faz a instru\u00e7\u00e3o imul ? Question Traduza esta fun\u00e7\u00e3o para C . Fique atento ao tamanho dos registradores usados para identificar o tamanho dos vari\u00e1veis inteiras. Antes de prosseguir, valide suas solu\u00e7\u00f5es da se\u00e7\u00e3o anterior com o professor. Vamos agora trabalhar com execut\u00e1veis \"completos\". Vamos analisar n\u00e3o somente o c\u00f3digo das fun\u00e7\u00f5es mas tamb\u00e9m sua chamada.","title":"Arquivo ex3.o"},{"location":"aulas/04-funcoes-mov/#arquivo-ex4","text":"Example Use o gdb para obter o conte\u00fado das fun\u00e7\u00f5es main e ex4 . Dica : lembre-se do comando disas Localize a chamada da fun\u00e7\u00e3o ex4 no main. As intru\u00e7\u00f5es acima do call colocam os argumentos nos lugares corretos para ex4 rodar. Question Quantos argumentos a fun\u00e7\u00e3o recebe? Quais s\u00e3o seus valores? Question Traduza a fun\u00e7\u00e3o ex4 para C .","title":"Arquivo ex4"},{"location":"aulas/04-funcoes-mov/#arquivo-ex5-desafio","text":"Warning Este exerc\u00edcio \u00e9 avan\u00e7ado e necessita de pesquisa para ser realizado. Fa\u00e7a-o somente ap\u00f3s validar suas solu\u00e7\u00f5es dos anteriores com os professores. A resposta dele ser\u00e1 validada nos atendimentos. Neste exerc\u00edcio vamos nos aprofundar no uso de ponteiros. Vimos no ex3.o um exemplo de fun\u00e7\u00e3o que armazenava um valor calculado em um ponteiro. Agora veremos um exemplo completo que inclui a chamada de uma fun\u00e7\u00e3o recebendo um endere\u00e7o. O trecho abaixo copia os argumentos para os registradores corretos e chama a fun\u00e7\u00e3o. 60b: 48 8d 4c 24 08 lea 0x8(%rsp),%rcx 610: 48 8d 54 24 0c lea 0xc(%rsp),%rdx 615: be 03 00 00 00 mov $0x3,%esi 61a: bf 0a 00 00 00 mov $0xa,%edi 61f: e8 d6 ff ff ff callq 5fa <ex5> Question Identifique a partir dos tipos de dados colocados nos registradores qual o tipo dos argumentos da fun\u00e7\u00e3o. Question Qual s\u00e3o os endere\u00e7os passados para a fun\u00e7\u00e3o ex5 ? Escreva-os em fun\u00e7\u00e3o do registrador %rsp . Question Os endere\u00e7os acima s\u00e3o passados em quais registradores? Vamos agora ao c\u00f3digo de ex5 : 00000000000005fa <ex5>: 5fa: 89 f8 mov %edi,%eax 5fc: 48 89 d7 mov %rdx,%rdi 5ff: 99 cltd 600: f7 fe idiv %esi 602: 89 07 mov %eax,(%rdi) 604: 89 11 mov %edx,(%rcx) 606: c3 retq Question Como a instru\u00e7\u00e3o idiv funciona? Em quais registradores ela posiciona seu resultado? Em quais registradores ela espera a entrada? Question O qu\u00ea faz a instru\u00e7\u00e3o cltd ? Por qu\u00ea ela \u00e9 necess\u00e1ria? Question Fa\u00e7a a tradu\u00e7\u00e3o de ex5 para C .","title":"Arquivo ex5 (desafio)"},{"location":"aulas/05-condicionais/","text":"05 - Condicionais \u00b6 Express\u00f5es booleanas \u00b6 Vimos na expositiva que toda opera\u00e7\u00e3o aritm\u00e9tica preenche as flags CF , ZF , SF e OF e que podemos usar estas flags para montar express\u00f5es booleanas com as instru\u00e7\u00f5es set* . A tabela abaixo mostra as instru\u00e7\u00f5es respons\u00e1veis cada tipo de express\u00e3o booleana. Tamb\u00e9m vimos que podemos preencher estas flags usando as instru\u00e7\u00f5es cmp e test , que executam opera\u00e7\u00f5es aritm\u00e9ticas (subtra\u00e7\u00e3o e E bit a bit) mas n\u00e3o guardam o resultado. Vamos analisar o c\u00f3digo assembly da seguinte fun\u00e7\u00e3o: int igual ( int a , int b ) { return a == b ; } 0000000000000000 < igual > : 0: 39 f7 cmp %esi , %edi 2: 0 f 94 c0 sete %al 5: 0 f b6 c0 movzbl %al , %eax 8: c3 retq A compara\u00e7\u00e3o a == b \u00e9 feita primeiro executando cmp entre os argumentos %edi e %esi e depois usando sete ( set equal ) para atribuir 1 %al se %edi == %esi e 0 caso contr\u00e1rio. Por fim, temos a instru\u00e7\u00e3o movzbl , que faz o cast de char ( %al ) para int ( %eax ). Lembre-se que as instru\u00e7\u00f5es set* s\u00f3 modificam os primeiros 8 bits de %eax . O restante continua com o valor antigo. Usamos movzbl para extender o n\u00famero em %al para ocupar todo %eax . Tip As instru\u00e7\u00f5es de convers\u00e3o de tipos s\u00e3o bastante frequentes em Assembly, principalmente para expandir valores colocados em registradores menores para registradores maiores. Elas seguem a seguinte regra: MOVtsd t pode ser z para tipos unsigned (completando com **z**eros) e s para tipos signed (completando com o bit de **s**inal). s \u00e9 o tamanho do registrador fonte seguindo a nota\u00e7\u00e3o b para 1 byte, w para 2 bytes, l para 4 bytes e q para 8 bytes. d \u00e9 o tamanho do registrador destino, seguinto a mesma nota\u00e7\u00e3o acima. Por exemplo, a instru\u00e7\u00e3o MOVZWQ converte um unsigned short para um unsigned long . Convers\u00f5es de 4 para 8 bytes muitas vezes s\u00e3o feitas com a instru\u00e7\u00e3o cltq , que extende (com sinal) %eax para %rax . Uma boa refer\u00eancia \u00e9 este site da Oracle . Vamos agora praticar. Nos 3 exerc\u00edcios abaixo temos fun\u00e7\u00f5es que avaliam uma (ou mais) express\u00f5es booleanas entre seus argumentos e retornam o resultado. Arquivo ex1 \u00b6 Reconstrua a fun\u00e7\u00e3o ex1 a partir do c\u00f3digo assembly abaixo. Dump of assembler code for function ex1 : 0 x0000000000000000 <+ 0 > : cmp $0xa , %edi 0 x0000000000000003 <+ 3 > : setg %al 0 x0000000000000006 <+ 6 > : movzbl %al , %eax 0 x0000000000000009 <+ 9 > : retq End of assembler dump. Question Qual \u00e9 o tamanho do argumento de ex1 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega que j\u00e1 validou sua solu\u00e7\u00e3o. Arquivo ex2 \u00b6 Reconstrua a fun\u00e7\u00e3o ex2 a partir do c\u00f3digo assembly abaixo Dump of assembler code for function ex2 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : setbe %al 0 x0000000000000006 <+ 6 > : movzbl %al , %eax 0 x0000000000000009 <+ 9 > : retq End of assembler dump. Question Qual \u00e9 o tamanho dos argumentos de ex2 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega que j\u00e1 validou sua solu\u00e7\u00e3o. Arquivo ex3 \u00b6 Reconstrua a fun\u00e7\u00e3o ex3 a partir do c\u00f3digo assembly abaixo. Dump of assembler code for function ex3 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : setg %al 0 x0000000000000006 <+ 6 > : test %rsi , %rsi 0 x0000000000000009 <+ 9 > : setg %dl 0 x000000000000000c <+ 12 > : and %edx , %eax 0 x000000000000000e <+ 14 > : movzbl %al , %eax 0 x0000000000000011 <+ 17 > : retq End of assembler dump. Question Qual \u00e9 o tamanho dos argumentos de ex3 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega. Condicionais \u00b6 Vimos na segunda parte expositiva que Assembly possui apenas instru\u00e7\u00f5es de pulos condicionais ( j* onde * representa uma compara\u00e7\u00e3o usando as mesmas abrevia\u00e7\u00f5es de set* ) e n\u00e3o condicionais ( jmp ). Vimos tamb\u00e9m que a combina\u00e7\u00e3o destas instru\u00e7\u00f5es com cmp e test \u00e9 equivalente \u00e0 dupla de comandos if ( cond - booleana ) { goto label ; } A tabela abaixo mostra as opera\u00e7\u00f5es de saltos condicionais. Exemplo guiado \u00b6 Vamos agora fazer um exemplo guiado. Analisaremos o seguinte c\u00f3digo: 0000000000000000 < eh_par >: 0 : 40 f6 c7 01 test $0x1 , % dil 4 : 74 06 je c < eh_par + 0xc > 6 : b8 00 00 00 00 mov $0x0 , % eax b : c3 retq c : b8 01 00 00 00 mov $0x1 , % eax 11 : c3 retq Pares de instru\u00e7\u00f5es test-j* ou cmp-j* s\u00e3o comumente usadas para representar a constru\u00e7\u00e3o if-goto . Question O nome da fun\u00e7\u00e3o d\u00e1 uma dica de seu valor de retorno. Voc\u00ea consegue entender o porqu\u00ea test $1, %dil faz isto? Dica: Escreva o teste exato que a fun\u00e7\u00e3o faz. Vamos agora traduzir a fun\u00e7\u00e3o eh_par para gotoC . As linhas 0-4 s\u00e3o transformadas em um par if-goto . O restante s\u00e3o instru\u00e7\u00f5es que j\u00e1 conhecemos. int eh_par ( long a ) { if ( a & 1 == 0 ) goto if1 ; return 0 ; if1 : return 1 ; } Tiramos ent\u00e3o o goto e levando em conta sua resposta no item anterior, ficamos com o seguinte c\u00f3digo. Note que precisamos negar a compara\u00e7\u00e3o feita no c\u00f3digo anterior! int eh_par ( long a ) { if ( a % 2 != 0 ) { return 0 ; } return 1 ; } Podemos observar duas coisas no c\u00f3digo assembly gerado: O c\u00f3digo que estava dentro do if foi colocado ap\u00f3s o c\u00f3digo que estava fora do if! O compilador pode mudar a ordem dos nossos blocos de c\u00f3digo se for conveniente (para ele, n\u00e3o para n\u00f3s). A constru\u00e7\u00e3o test-j* e cmp-j* pode ser mapeada diretamente para if-goto . Por\u00e9m, reconstruir um c\u00f3digo leg\u00edvel requer, muitas vezes, mudar c\u00f3digo de lugar. Vamos agora praticar com alguns exerc\u00edcios simples: Arquivo ex4 \u00b6 Veja o c\u00f3digo abaixo Dump of assembler code for function fun4 : 0 x0000000000000000 <+ 0 > : test %rdi , %rdi 0 x0000000000000003 <+ 3 > : jle 0xf < fun4 + 15 > 0 x0000000000000005 <+ 5 > : mov $0x2 , %eax 0 x000000000000000a <+ 10 > : imul %rsi , %rax 0 x000000000000000e <+ 14 > : retq 0 x000000000000000f <+ 15 > : mov $0x1 , %eax 0 x0000000000000014 <+ 20 > : jmp 0xa < fun4 + 10 > End of assembler dump. Question Qual express\u00e3o booleana \u00e9 testada? Example Fa\u00e7a a tradu\u00e7\u00e3o desta fun\u00e7\u00e3o para gotoC . Example Transforme o c\u00f3digo acima em C leg\u00edvel. Arquivo ex5 \u00b6 Veja o c\u00f3digo da fun\u00e7\u00e3o abaixo. Dump of assembler code for function ex5 : 0 x0000000000000000 <+ 0 > : test %rdi , %rdi 0 x0000000000000003 <+ 3 > : setg %dl 0 x0000000000000006 <+ 6 > : test %rsi , %rsi 0 x0000000000000009 <+ 9 > : setle %al 0 x000000000000000c <+ 12 > : test %al , %dl 0 x000000000000000e <+ 14 > : jne 0x15 < ex5 + 21 > 0 x0000000000000010 <+ 16 > : lea -0 x2 ( %rsi ), %rax 0 x0000000000000014 <+ 20 > : retq 0 x0000000000000015 <+ 21 > : lea 0x5 ( %rdi ), %rax 0 x0000000000000019 <+ 25 > : retq End of assembler dump. Question Qual s\u00e3o as express\u00f5es booleanas testadas? (Dica: s\u00e3o 3, assim como no exerc\u00edcio 3). Example Fa\u00e7a uma tradu\u00e7\u00e3o para gotoC . Example Transforme seu c\u00f3digo acima para C leg\u00edvel. Exemplo guiado II \u00b6 Veremos agora um exemplo if/else : int exemplo2 ( long a , long b ) { long c ; if ( a >= 5 && b <= 0 ) { c = a + b ; } else { c = a - b ; } return c ; } Seu assembly correspondente, quando compilado com gcc -Og -c \u00e9 0000000000000000 < exemplo2 > : 0: 48 83 ff 04 cmp $0x4 , %rdi 4: 0 f 9 f c2 setg %dl 7: 48 85 f6 test %rsi , %rsi a: 0 f 9 e c0 setle %al d: 84 c2 test %al , %dl f: 75 07 jne 18 < exemplo2 + 0x18 > 11: 48 89 f8 mov %rdi , %rax 14: 48 29 f0 sub %rsi , %rax 17: c3 retq 18: 48 8 d 04 37 lea ( %rdi , %rsi , 1 ), %rax 1 c: c3 retq Primeiramente, notamos que a fun\u00e7\u00e3o recebe dois argumentos (pois s\u00f3 utiliza %rdi e %rsi ) e que ambos s\u00e3o tratados como long . Vamos ent\u00e3o \u00e0s express\u00f5es booleanas. Existem tr\u00eas express\u00f5es boolenas: cmp - setg (linhas 0-4 ) compara %rdi com 4 e seta %dl=1 se %rdi>4 (**g**reater) test-setle (linhas 7-a ) compara %rsi com 0 e seta %al=1 se %rsi<=0 (**l**ess or **e**qual). test (linha d ) entre %dl e %al . O resultado n\u00e3o \u00e9 armazenado. Logo abaixo do \u00faltimo test temos um jne (linha f ), acr\u00f4nimo para **j**ump if **n**ot **e**qual. Ou seja, fazemos o jump se %dl && %al for verdadeiro. Logo em seguida temos instru\u00e7\u00f5es aritm\u00e9ticas, que j\u00e1 estudamos nos \u00faltimos handouts. Assim como vimos nos slides, vamos converter este c\u00f3digo para gotoC primeiro. Assim como fizemos nos exerc\u00edcios de 1 a 3, criaremos uma vari\u00e1vel para as express\u00f5es booleanas 1 e 2 e substituiremos as instru\u00e7\u00f5es test-jne (linhas d-f ) por um par if-goto . Veja abaixo: int exemplo2 ( long a , long b ) { long retval ; int expr1 = a > 4 ; int expr2 = b <= 0 ; if ( expr1 && expr2 ) goto if1 ; retval = a ; retval -= b ; return retval ; if1 : retval = a + b ; return retval ; } Podemos ent\u00e3o melhorar tornar este c\u00f3digo mais leg\u00edvel, resultando no seguinte: int exemplo2 ( long a , long b ) { if ( a > 4 && b <= 0 ) { return a + b ; } else { return a - b ; } } Duas coisas importantes podem ser vistas neste c\u00f3digo As compara\u00e7\u00f5es n\u00e3o s\u00e3o exatamente iguais ( a>4 e a>=5 ), mas s\u00e3o equivalentes. O compilador pode trocar a ordem do if/else e colocar o else primeiro no Assembly gerado. Isto n\u00e3o altera o resultado da fun\u00e7\u00e3o, mas pode ser confuso de in\u00edcio. Arquivo ex6 \u00b6 O exerc\u00edcio abaixo usa if-else . Dump of assembler code for function ex6 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : jle 0x8 < ex6 + 8 > 0 x0000000000000005 <+ 5 > : mov %rdi , %rsi 0 x0000000000000008 <+ 8 > : test %rdi , %rdi 0 x000000000000000b <+ 11 > : jle 0x10 < ex6 + 16 > 0 x000000000000000d <+ 13 > : neg %rsi 0 x0000000000000010 <+ 16 > : mov %esi , %eax 0 x0000000000000012 <+ 18 > : retq End of assembler dump. Example Traduza o c\u00f3digo acima para gotoC . Example Fa\u00e7a uma vers\u00e3o leg\u00edvel do c\u00f3digo acima.","title":"05 - Condicionais"},{"location":"aulas/05-condicionais/#05-condicionais","text":"","title":"05 - Condicionais"},{"location":"aulas/05-condicionais/#expressoes-booleanas","text":"Vimos na expositiva que toda opera\u00e7\u00e3o aritm\u00e9tica preenche as flags CF , ZF , SF e OF e que podemos usar estas flags para montar express\u00f5es booleanas com as instru\u00e7\u00f5es set* . A tabela abaixo mostra as instru\u00e7\u00f5es respons\u00e1veis cada tipo de express\u00e3o booleana. Tamb\u00e9m vimos que podemos preencher estas flags usando as instru\u00e7\u00f5es cmp e test , que executam opera\u00e7\u00f5es aritm\u00e9ticas (subtra\u00e7\u00e3o e E bit a bit) mas n\u00e3o guardam o resultado. Vamos analisar o c\u00f3digo assembly da seguinte fun\u00e7\u00e3o: int igual ( int a , int b ) { return a == b ; } 0000000000000000 < igual > : 0: 39 f7 cmp %esi , %edi 2: 0 f 94 c0 sete %al 5: 0 f b6 c0 movzbl %al , %eax 8: c3 retq A compara\u00e7\u00e3o a == b \u00e9 feita primeiro executando cmp entre os argumentos %edi e %esi e depois usando sete ( set equal ) para atribuir 1 %al se %edi == %esi e 0 caso contr\u00e1rio. Por fim, temos a instru\u00e7\u00e3o movzbl , que faz o cast de char ( %al ) para int ( %eax ). Lembre-se que as instru\u00e7\u00f5es set* s\u00f3 modificam os primeiros 8 bits de %eax . O restante continua com o valor antigo. Usamos movzbl para extender o n\u00famero em %al para ocupar todo %eax . Tip As instru\u00e7\u00f5es de convers\u00e3o de tipos s\u00e3o bastante frequentes em Assembly, principalmente para expandir valores colocados em registradores menores para registradores maiores. Elas seguem a seguinte regra: MOVtsd t pode ser z para tipos unsigned (completando com **z**eros) e s para tipos signed (completando com o bit de **s**inal). s \u00e9 o tamanho do registrador fonte seguindo a nota\u00e7\u00e3o b para 1 byte, w para 2 bytes, l para 4 bytes e q para 8 bytes. d \u00e9 o tamanho do registrador destino, seguinto a mesma nota\u00e7\u00e3o acima. Por exemplo, a instru\u00e7\u00e3o MOVZWQ converte um unsigned short para um unsigned long . Convers\u00f5es de 4 para 8 bytes muitas vezes s\u00e3o feitas com a instru\u00e7\u00e3o cltq , que extende (com sinal) %eax para %rax . Uma boa refer\u00eancia \u00e9 este site da Oracle . Vamos agora praticar. Nos 3 exerc\u00edcios abaixo temos fun\u00e7\u00f5es que avaliam uma (ou mais) express\u00f5es booleanas entre seus argumentos e retornam o resultado.","title":"Express\u00f5es booleanas"},{"location":"aulas/05-condicionais/#arquivo-ex1","text":"Reconstrua a fun\u00e7\u00e3o ex1 a partir do c\u00f3digo assembly abaixo. Dump of assembler code for function ex1 : 0 x0000000000000000 <+ 0 > : cmp $0xa , %edi 0 x0000000000000003 <+ 3 > : setg %al 0 x0000000000000006 <+ 6 > : movzbl %al , %eax 0 x0000000000000009 <+ 9 > : retq End of assembler dump. Question Qual \u00e9 o tamanho do argumento de ex1 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega que j\u00e1 validou sua solu\u00e7\u00e3o.","title":"Arquivo ex1"},{"location":"aulas/05-condicionais/#arquivo-ex2","text":"Reconstrua a fun\u00e7\u00e3o ex2 a partir do c\u00f3digo assembly abaixo Dump of assembler code for function ex2 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : setbe %al 0 x0000000000000006 <+ 6 > : movzbl %al , %eax 0 x0000000000000009 <+ 9 > : retq End of assembler dump. Question Qual \u00e9 o tamanho dos argumentos de ex2 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega que j\u00e1 validou sua solu\u00e7\u00e3o.","title":"Arquivo ex2"},{"location":"aulas/05-condicionais/#arquivo-ex3","text":"Reconstrua a fun\u00e7\u00e3o ex3 a partir do c\u00f3digo assembly abaixo. Dump of assembler code for function ex3 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : setg %al 0 x0000000000000006 <+ 6 > : test %rsi , %rsi 0 x0000000000000009 <+ 9 > : setg %dl 0 x000000000000000c <+ 12 > : and %edx , %eax 0 x000000000000000e <+ 14 > : movzbl %al , %eax 0 x0000000000000011 <+ 17 > : retq End of assembler dump. Question Qual \u00e9 o tamanho dos argumentos de ex3 ? Ele \u00e9 signed ou unsigned ? Example Coloque sua tradu\u00e7\u00e3o abaixo. Valide sua solu\u00e7\u00e3o com o professor ou com algum colega.","title":"Arquivo ex3"},{"location":"aulas/05-condicionais/#condicionais","text":"Vimos na segunda parte expositiva que Assembly possui apenas instru\u00e7\u00f5es de pulos condicionais ( j* onde * representa uma compara\u00e7\u00e3o usando as mesmas abrevia\u00e7\u00f5es de set* ) e n\u00e3o condicionais ( jmp ). Vimos tamb\u00e9m que a combina\u00e7\u00e3o destas instru\u00e7\u00f5es com cmp e test \u00e9 equivalente \u00e0 dupla de comandos if ( cond - booleana ) { goto label ; } A tabela abaixo mostra as opera\u00e7\u00f5es de saltos condicionais.","title":"Condicionais"},{"location":"aulas/05-condicionais/#exemplo-guiado","text":"Vamos agora fazer um exemplo guiado. Analisaremos o seguinte c\u00f3digo: 0000000000000000 < eh_par >: 0 : 40 f6 c7 01 test $0x1 , % dil 4 : 74 06 je c < eh_par + 0xc > 6 : b8 00 00 00 00 mov $0x0 , % eax b : c3 retq c : b8 01 00 00 00 mov $0x1 , % eax 11 : c3 retq Pares de instru\u00e7\u00f5es test-j* ou cmp-j* s\u00e3o comumente usadas para representar a constru\u00e7\u00e3o if-goto . Question O nome da fun\u00e7\u00e3o d\u00e1 uma dica de seu valor de retorno. Voc\u00ea consegue entender o porqu\u00ea test $1, %dil faz isto? Dica: Escreva o teste exato que a fun\u00e7\u00e3o faz. Vamos agora traduzir a fun\u00e7\u00e3o eh_par para gotoC . As linhas 0-4 s\u00e3o transformadas em um par if-goto . O restante s\u00e3o instru\u00e7\u00f5es que j\u00e1 conhecemos. int eh_par ( long a ) { if ( a & 1 == 0 ) goto if1 ; return 0 ; if1 : return 1 ; } Tiramos ent\u00e3o o goto e levando em conta sua resposta no item anterior, ficamos com o seguinte c\u00f3digo. Note que precisamos negar a compara\u00e7\u00e3o feita no c\u00f3digo anterior! int eh_par ( long a ) { if ( a % 2 != 0 ) { return 0 ; } return 1 ; } Podemos observar duas coisas no c\u00f3digo assembly gerado: O c\u00f3digo que estava dentro do if foi colocado ap\u00f3s o c\u00f3digo que estava fora do if! O compilador pode mudar a ordem dos nossos blocos de c\u00f3digo se for conveniente (para ele, n\u00e3o para n\u00f3s). A constru\u00e7\u00e3o test-j* e cmp-j* pode ser mapeada diretamente para if-goto . Por\u00e9m, reconstruir um c\u00f3digo leg\u00edvel requer, muitas vezes, mudar c\u00f3digo de lugar. Vamos agora praticar com alguns exerc\u00edcios simples:","title":"Exemplo guiado"},{"location":"aulas/05-condicionais/#arquivo-ex4","text":"Veja o c\u00f3digo abaixo Dump of assembler code for function fun4 : 0 x0000000000000000 <+ 0 > : test %rdi , %rdi 0 x0000000000000003 <+ 3 > : jle 0xf < fun4 + 15 > 0 x0000000000000005 <+ 5 > : mov $0x2 , %eax 0 x000000000000000a <+ 10 > : imul %rsi , %rax 0 x000000000000000e <+ 14 > : retq 0 x000000000000000f <+ 15 > : mov $0x1 , %eax 0 x0000000000000014 <+ 20 > : jmp 0xa < fun4 + 10 > End of assembler dump. Question Qual express\u00e3o booleana \u00e9 testada? Example Fa\u00e7a a tradu\u00e7\u00e3o desta fun\u00e7\u00e3o para gotoC . Example Transforme o c\u00f3digo acima em C leg\u00edvel.","title":"Arquivo ex4"},{"location":"aulas/05-condicionais/#arquivo-ex5","text":"Veja o c\u00f3digo da fun\u00e7\u00e3o abaixo. Dump of assembler code for function ex5 : 0 x0000000000000000 <+ 0 > : test %rdi , %rdi 0 x0000000000000003 <+ 3 > : setg %dl 0 x0000000000000006 <+ 6 > : test %rsi , %rsi 0 x0000000000000009 <+ 9 > : setle %al 0 x000000000000000c <+ 12 > : test %al , %dl 0 x000000000000000e <+ 14 > : jne 0x15 < ex5 + 21 > 0 x0000000000000010 <+ 16 > : lea -0 x2 ( %rsi ), %rax 0 x0000000000000014 <+ 20 > : retq 0 x0000000000000015 <+ 21 > : lea 0x5 ( %rdi ), %rax 0 x0000000000000019 <+ 25 > : retq End of assembler dump. Question Qual s\u00e3o as express\u00f5es booleanas testadas? (Dica: s\u00e3o 3, assim como no exerc\u00edcio 3). Example Fa\u00e7a uma tradu\u00e7\u00e3o para gotoC . Example Transforme seu c\u00f3digo acima para C leg\u00edvel.","title":"Arquivo ex5"},{"location":"aulas/05-condicionais/#exemplo-guiado-ii","text":"Veremos agora um exemplo if/else : int exemplo2 ( long a , long b ) { long c ; if ( a >= 5 && b <= 0 ) { c = a + b ; } else { c = a - b ; } return c ; } Seu assembly correspondente, quando compilado com gcc -Og -c \u00e9 0000000000000000 < exemplo2 > : 0: 48 83 ff 04 cmp $0x4 , %rdi 4: 0 f 9 f c2 setg %dl 7: 48 85 f6 test %rsi , %rsi a: 0 f 9 e c0 setle %al d: 84 c2 test %al , %dl f: 75 07 jne 18 < exemplo2 + 0x18 > 11: 48 89 f8 mov %rdi , %rax 14: 48 29 f0 sub %rsi , %rax 17: c3 retq 18: 48 8 d 04 37 lea ( %rdi , %rsi , 1 ), %rax 1 c: c3 retq Primeiramente, notamos que a fun\u00e7\u00e3o recebe dois argumentos (pois s\u00f3 utiliza %rdi e %rsi ) e que ambos s\u00e3o tratados como long . Vamos ent\u00e3o \u00e0s express\u00f5es booleanas. Existem tr\u00eas express\u00f5es boolenas: cmp - setg (linhas 0-4 ) compara %rdi com 4 e seta %dl=1 se %rdi>4 (**g**reater) test-setle (linhas 7-a ) compara %rsi com 0 e seta %al=1 se %rsi<=0 (**l**ess or **e**qual). test (linha d ) entre %dl e %al . O resultado n\u00e3o \u00e9 armazenado. Logo abaixo do \u00faltimo test temos um jne (linha f ), acr\u00f4nimo para **j**ump if **n**ot **e**qual. Ou seja, fazemos o jump se %dl && %al for verdadeiro. Logo em seguida temos instru\u00e7\u00f5es aritm\u00e9ticas, que j\u00e1 estudamos nos \u00faltimos handouts. Assim como vimos nos slides, vamos converter este c\u00f3digo para gotoC primeiro. Assim como fizemos nos exerc\u00edcios de 1 a 3, criaremos uma vari\u00e1vel para as express\u00f5es booleanas 1 e 2 e substituiremos as instru\u00e7\u00f5es test-jne (linhas d-f ) por um par if-goto . Veja abaixo: int exemplo2 ( long a , long b ) { long retval ; int expr1 = a > 4 ; int expr2 = b <= 0 ; if ( expr1 && expr2 ) goto if1 ; retval = a ; retval -= b ; return retval ; if1 : retval = a + b ; return retval ; } Podemos ent\u00e3o melhorar tornar este c\u00f3digo mais leg\u00edvel, resultando no seguinte: int exemplo2 ( long a , long b ) { if ( a > 4 && b <= 0 ) { return a + b ; } else { return a - b ; } } Duas coisas importantes podem ser vistas neste c\u00f3digo As compara\u00e7\u00f5es n\u00e3o s\u00e3o exatamente iguais ( a>4 e a>=5 ), mas s\u00e3o equivalentes. O compilador pode trocar a ordem do if/else e colocar o else primeiro no Assembly gerado. Isto n\u00e3o altera o resultado da fun\u00e7\u00e3o, mas pode ser confuso de in\u00edcio.","title":"Exemplo guiado II"},{"location":"aulas/05-condicionais/#arquivo-ex6","text":"O exerc\u00edcio abaixo usa if-else . Dump of assembler code for function ex6 : 0 x0000000000000000 <+ 0 > : cmp %rsi , %rdi 0 x0000000000000003 <+ 3 > : jle 0x8 < ex6 + 8 > 0 x0000000000000005 <+ 5 > : mov %rdi , %rsi 0 x0000000000000008 <+ 8 > : test %rdi , %rdi 0 x000000000000000b <+ 11 > : jle 0x10 < ex6 + 16 > 0 x000000000000000d <+ 13 > : neg %rsi 0 x0000000000000010 <+ 16 > : mov %esi , %eax 0 x0000000000000012 <+ 18 > : retq End of assembler dump. Example Traduza o c\u00f3digo acima para gotoC . Example Fa\u00e7a uma vers\u00e3o leg\u00edvel do c\u00f3digo acima.","title":"Arquivo ex6"},{"location":"aulas/06-condicionais-funcoes/","text":"06 - Condicionais e fun\u00e7\u00f5es \u00b6 Na aula de hoje vamos revisar e praticar os conceitos de fun\u00e7\u00f5es e condicionais em Assembly. Teremos exerc\u00edcios simples de cada assunto e no fim alguns exerc\u00edcios para entrega que juntam coisas diferentes. Fun\u00e7\u00f5es e aritm\u00e9tica com LEA \u00b6 Todos os exerc\u00edcios da revis\u00e3o ser\u00e3o feitos com o arquivo exemplo1 (compilado a partir de exemplo1.c ). Vamos examinar tanto a fun\u00e7\u00e3o main quanto a fun\u00e7\u00e3o exemplo1 . Chamadas de fun\u00e7\u00f5es \u00b6 As chamadas de fun\u00e7\u00e3o s\u00e3o feitas usando a seguinte ordem para os argumentos inteiros: %rdi %rsi %rdx %rcx %r8 %r9 Esta ordem nunca muda . Veja abaixo um exemplo de chamada de fun\u00e7\u00e3o tirado do main de exemplo1 . 0 x065c <+ 4 > : mov $0x6 , %r9d 0 x0662 <+ 10 > : mov $0x5 , %r8d 0 x0668 <+ 16 > : mov $0x4 , %ecx 0 x066d <+ 21 > : mov $0x3 , %edx 0 x0672 <+ 26 > : mov $0x2 , %esi 0 x0677 <+ 31 > : mov $0x1 , %edi 0 x067c <+ 36 > : callq 0x64a < exemplo1 > 0 x0681 <+ 41 > : lea 0xa ( %rax ), %esi Question O valor do primeiro argumento da fun\u00e7\u00e3o \u00e9 6 1 Resposta A ordem dos par\u00e2metros segue \u00e9 sempre a mesma vista na aula 04 . Mesmo que as instru\u00e7\u00f5es estejam em ordem diferente, %edi (ou uma de suas partes) \u00e9 sempre o primeiro par\u00e2metro. Question A instru\u00e7\u00e3o call realiza chamadas de fun\u00e7\u00e3o. Traduza a chamada de fun\u00e7\u00e3o acima para C . Resposta exemplo1(1, 2, 3, 4, 5, 6) Vamos agora analisar o c\u00f3digo de exemplo1 : Dump of assembler code for function exemplo1 : 0 x064a <+ 0 > : add %esi , %edi 0 x064c <+ 2 > : add %edi , %edx 0 x064e <+ 4 > : add %edx , %ecx 0 x0650 <+ 6 > : add %r8d , %ecx 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax 0 x0657 <+ 13 > : retq Question Quantos par\u00e2metros a fun\u00e7\u00e3o acima recebe? Quais seus tipos? Ela retorna algum valor? Se sim, qual seu tipo? Question Declare a fun\u00e7\u00e3o acima com base na sua resposta anterior. Resposta int exemplo1(int a, int b, int c, int d, int e, int f); Question O que faz o conjunto de instru\u00e7\u00f5es add nas linhas +0 at\u00e9 +6 ? Escreva uma express\u00e3o em C equivalente. Resposta Ela soma os primeiros 5 argumentos: a + b + c + e . Vemos na linha exemplo1+9 que colocamos um valor no registrador %eax e depois finalizamos a fun\u00e7\u00e3o usando retq . Este \u00e9 o segundo ponto que nunca muda: o valor de retorno de toda fun\u00e7\u00e3o \u00e9 colocado no registrador %rax (ou uma de suas partes menores). Neste exemplo, a instru\u00e7\u00e3o usada foi o LEA que veremos na se\u00e7\u00e3o a seguir. Opera\u00e7\u00f5es aritm\u00e9ticas usando LEA \u00b6 Se usada de maneira literal, a instru\u00e7\u00e3o LEA (**L**oad **E**ffective **A**ddress) serve para calcular o endere\u00e7o de uma vari\u00e1vel local e \u00e9 equivalente ao operador & em C . Por\u00e9m, ela \u00e9 frequentemente \"abusada\" para fazer aritm\u00e9tica. Um ponto importante quando usamos LEA \u00e9 que todos os operandos s\u00e3o registradores de 64 bits. Regra geral Se LEA for usada com o registrador %rsp ent\u00e3o ela sempre representa o operador & Se os registradores envolvidos foram usados como n\u00fameros inteiros em instru\u00e7\u00f5es anteriores, ent\u00e3o ela representa uma conta com os valores dos registradores. Vejamos o exemplo da fun\u00e7\u00e3o exemplo1 acima: 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax No exemplo acima LEA \u00e9 usada para fazer aritm\u00e9tica. Sabemos disso pois, na chamada traduzida na parte anterior, elas recebem n\u00fameros inteiros ( %r9d = 6 e %ecx = 4 ). Seu primeiro argumento segue a seguinte l\u00f3gica C ( %R1 , %R2 , S ) C \u00e9 uma constante %R1 \u00e9 um registrador %R2 \u00e9 um registrador (pode ser igual a %R1 ) S \u00e9 1, 2, 4 ou 8 (todos os tamanhos poss\u00edveis de registradores inteiros) A opera\u00e7\u00e3o acima calcula C + %R1 + (%R2 * S) . A opera\u00e7\u00e3o LEA nunca acessa a mem\u00f3ria , apenas move o resultado deste c\u00e1lculo para o registrador destino. Qualquer outra opera\u00e7\u00e3o que use a sintaxa acima est\u00e1 fazendo um acesso a mem\u00f3ria. LEA \u00e9 a \u00fanica exce\u00e7\u00e3o! Question Traduza a opera\u00e7\u00e3o abaixo para C 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax Question Com estas informa\u00e7\u00f5es em m\u00e3os, traduza exemplo1 para C Dump of assembler code for function exemplo1 : 0 x064a <+ 0 > : add %esi , %edi 0 x064c <+ 2 > : add %edi , %edx 0 x064e <+ 4 > : add %edx , %ecx 0 x0650 <+ 6 > : add %r8d , %ecx 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax 0 x0657 <+ 13 > : retq Resposta Confira no arquivo exemplo1.c Retorno de fun\u00e7\u00f5es \u00b6 Vamos terminar nossa revis\u00e3o analisando novamente a chamada de exemplo1 no main : 0 x065c <+ 4 > : mov $0x6 , %r9d 0 x0662 <+ 10 > : mov $0x5 , %r8d 0 x0668 <+ 16 > : mov $0x4 , %ecx 0 x066d <+ 21 > : mov $0x3 , %edx 0 x0672 <+ 26 > : mov $0x2 , %esi 0 x0677 <+ 31 > : mov $0x1 , %edi 0 x067c <+ 36 > : callq 0x64a < exemplo1 > 0 x0681 <+ 41 > : lea 0xa ( %rax ), %esi Anteriormente j\u00e1 vimos que o call e os mov s acima fazem a chamada exemplo1(1,2,3,4,5,6) em C . A linha de baixo realiza uma opera\u00e7\u00e3o aritm\u00e9tica com %rax . Question Considerando que %rax armazena o valor de retorno de uma fun\u00e7\u00e3o, qual seria a tradu\u00e7\u00e3o para C do bloco de c\u00f3digo acima? Resposta int esi = exemplo1(1, 2, 3, 4, 5, 6) + 10; Exerc\u00edcios combinados \u00b6 Warning Todos os exerc\u00edcios desta se\u00e7\u00e3o s\u00e3o para entrega. Voc\u00eas podem se conversar para faz\u00ea-los, mas cada um deve criar sua pr\u00f3pria solu\u00e7\u00e3o do zero. Todos os exerc\u00edcios j\u00e1 est\u00e3o dispon\u00edveis no reposit\u00f3rio template de entregas na pasta 03-condicionais-funcoes . Ver template em https://github.com/insper-classroom/21_2_sishard_entrega_atividades_template Arquivo ex1 : Aritm\u00e9tica e Express\u00f5es booleanas . \u00b6 Dump of assembler code for function ex1 : 0 x05fa <+ 0 > : lea ( %rdi , %rsi , 1 ), %rax 0 x05fe <+ 4 > : lea ( %rax , %rdx , 4 ), %rcx 0 x0602 <+ 8 > : imul %rdi , %rdi 0 x0606 <+ 12 > : lea ( %rdi , %rsi , 2 ), %rax 0 x060a <+ 16 > : add %rax , %rdx 0 x060d <+ 19 > : cmp %rdx , %rcx 0 x0610 <+ 22 > : setge %al 0 x0613 <+ 25 > : movzbl %al , %eax 0 x0616 <+ 28 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? Quais seus tipos? Declare a fun\u00e7\u00e3o abaixo. Question As instru\u00e7\u00f5es LEA acima representam opera\u00e7\u00f5es aritm\u00e9ticas ou a opera\u00e7\u00e3o endere\u00e7o de & ? Como voc\u00ea fez esta identifica\u00e7\u00e3o? . Question Traduza as opera\u00e7\u00f5es das linhas ex1+0 at\u00e9 ex1+12 para C Question Nas linhas ex1+19 e ex1+22 \u00e9 feita uma compara\u00e7\u00e3o. Qual e entre quais registradores? Onde \u00e9 armazenado este resultado? Question O qu\u00ea faz a instru\u00e7\u00e3o movzbl em ex1+25 ? Juntando com a resposta da pergunta acima, traduza as instru\u00e7\u00f5es ex1+19 at\u00e9 ex1+28 para C . Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes. Arquivo ex2 : Chamadas de fun\u00e7\u00f5es e Condicionais . \u00b6 Dump of assembler code for function ex2 : 0 x05ff <+ 0 > : push %rbx 0 x0600 <+ 1 > : mov %rdi , %rbx 0 x0603 <+ 4 > : mov %rsi , %rdi 0 x0606 <+ 7 > : callq 0x5fa < vezes2 > 0 x060b <+ 12 > : cmp %rbx , %rax 0 x060e <+ 15 > : jle 0x613 < ex2 + 20 > 0 x0610 <+ 17 > : add %rbx , %rbx 0 x0613 <+ 20 > : add %rbx , %rax 0 x0616 <+ 23 > : pop %rbx 0 x0617 <+ 24 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? Quais s\u00e3o seus tipos? Declare-a abaixo. Vamos come\u00e7ar trabalhando na linha ex2+7 , na instru\u00e7\u00e3o call vezes2 . A chamada necessita usar o registrador %rdi , mas ele cont\u00e9m o primeiro argumento de ex2 . Question Em qual registrador \u00e9 guardado o primeiro argumento de ex2 ? Isso \u00e9 feito antes da chamada call . Question Qual vari\u00e1vel \u00e9 passada como argumento para a fun\u00e7\u00e3o vezes2 ? Question Escreva abaixo a invoca\u00e7\u00e3o de vezes2 . Voc\u00ea deve ter notado as instru\u00e7\u00f5es push/pop %rbx no come\u00e7o/fim da fun\u00e7\u00e3o. Toda fun\u00e7\u00e3o pode usar os registradores de argumentos (vistos na parte 1) e o de valor de retorno como quiserem. Se precisarem mexer nos outros registradores a pr\u00e1tica \u00e9 salv\u00e1-los na pilha no come\u00e7o da fun\u00e7\u00e3o e restaur\u00e1-los no fim. Assim n\u00e3o importa o que a fun\u00e7\u00e3o fa\u00e7a, para a fun\u00e7\u00e3o chamadora \u00e9 como se n\u00e3o houvesse havido nenhuma modifica\u00e7\u00e3o nos outros registradores. Vamos agora olhar a condicional na linha ex2+12 . Question Ap\u00f3s a chamada call , qual o conte\u00fado de %rax ? Question Juntando suas respostas nas quest\u00f5es de cima, qual \u00e9 a compara\u00e7\u00e3o feita nas linhas ex2+12, ex2+15 ? Question Com essas informa\u00e7\u00f5es em m\u00e3os, fa\u00e7a uma tradu\u00e7\u00e3o do c\u00f3digo acima para C usando somente if+goto . Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes. Arquivo ex3 : Ponteiros e Express\u00f5es booleanas . \u00b6 Dump of assembler code for function ex3 : 0 x05fa <+ 0 > : cmp %rsi , %rdi 0 x05fd <+ 3 > : setl %al 0 x0600 <+ 6 > : movzbl %al , %eax 0 x0603 <+ 9 > : mov %eax ,( %rdx ) 0 x0605 <+ 11 > : cmp %rsi , %rdi 0 x0608 <+ 14 > : sete %al 0 x060b <+ 17 > : movzbl %al , %eax 0 x060e <+ 20 > : mov %eax ,( %rcx ) 0 x0610 <+ 22 > : cmp %rsi , %rdi 0 x0613 <+ 25 > : setg %al 0 x0616 <+ 28 > : movzbl %al , %eax 0 x0619 <+ 31 > : mov %eax ,( %r8 ) 0 x061c <+ 34 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? De quais tipos? Declare-a abaixo. Question A fun\u00e7\u00e3o acima faz v\u00e1rias compara\u00e7\u00f5es. Liste quais e entre quais argumentos. Question Onde \u00e9 armazenado o resultado de cada compara\u00e7\u00e3o? Question Com base em suas respostas acima, fa\u00e7a uma tradu\u00e7\u00e3o linha a linha da fun\u00e7\u00e3o acima. Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes.","title":"06 - Condicionais e fun\u00e7\u00f5es"},{"location":"aulas/06-condicionais-funcoes/#06-condicionais-e-funcoes","text":"Na aula de hoje vamos revisar e praticar os conceitos de fun\u00e7\u00f5es e condicionais em Assembly. Teremos exerc\u00edcios simples de cada assunto e no fim alguns exerc\u00edcios para entrega que juntam coisas diferentes.","title":"06 - Condicionais e fun\u00e7\u00f5es"},{"location":"aulas/06-condicionais-funcoes/#funcoes-e-aritmetica-com-lea","text":"Todos os exerc\u00edcios da revis\u00e3o ser\u00e3o feitos com o arquivo exemplo1 (compilado a partir de exemplo1.c ). Vamos examinar tanto a fun\u00e7\u00e3o main quanto a fun\u00e7\u00e3o exemplo1 .","title":"Fun\u00e7\u00f5es e aritm\u00e9tica com LEA"},{"location":"aulas/06-condicionais-funcoes/#chamadas-de-funcoes","text":"As chamadas de fun\u00e7\u00e3o s\u00e3o feitas usando a seguinte ordem para os argumentos inteiros: %rdi %rsi %rdx %rcx %r8 %r9 Esta ordem nunca muda . Veja abaixo um exemplo de chamada de fun\u00e7\u00e3o tirado do main de exemplo1 . 0 x065c <+ 4 > : mov $0x6 , %r9d 0 x0662 <+ 10 > : mov $0x5 , %r8d 0 x0668 <+ 16 > : mov $0x4 , %ecx 0 x066d <+ 21 > : mov $0x3 , %edx 0 x0672 <+ 26 > : mov $0x2 , %esi 0 x0677 <+ 31 > : mov $0x1 , %edi 0 x067c <+ 36 > : callq 0x64a < exemplo1 > 0 x0681 <+ 41 > : lea 0xa ( %rax ), %esi Question O valor do primeiro argumento da fun\u00e7\u00e3o \u00e9 6 1 Resposta A ordem dos par\u00e2metros segue \u00e9 sempre a mesma vista na aula 04 . Mesmo que as instru\u00e7\u00f5es estejam em ordem diferente, %edi (ou uma de suas partes) \u00e9 sempre o primeiro par\u00e2metro. Question A instru\u00e7\u00e3o call realiza chamadas de fun\u00e7\u00e3o. Traduza a chamada de fun\u00e7\u00e3o acima para C . Resposta exemplo1(1, 2, 3, 4, 5, 6) Vamos agora analisar o c\u00f3digo de exemplo1 : Dump of assembler code for function exemplo1 : 0 x064a <+ 0 > : add %esi , %edi 0 x064c <+ 2 > : add %edi , %edx 0 x064e <+ 4 > : add %edx , %ecx 0 x0650 <+ 6 > : add %r8d , %ecx 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax 0 x0657 <+ 13 > : retq Question Quantos par\u00e2metros a fun\u00e7\u00e3o acima recebe? Quais seus tipos? Ela retorna algum valor? Se sim, qual seu tipo? Question Declare a fun\u00e7\u00e3o acima com base na sua resposta anterior. Resposta int exemplo1(int a, int b, int c, int d, int e, int f); Question O que faz o conjunto de instru\u00e7\u00f5es add nas linhas +0 at\u00e9 +6 ? Escreva uma express\u00e3o em C equivalente. Resposta Ela soma os primeiros 5 argumentos: a + b + c + e . Vemos na linha exemplo1+9 que colocamos um valor no registrador %eax e depois finalizamos a fun\u00e7\u00e3o usando retq . Este \u00e9 o segundo ponto que nunca muda: o valor de retorno de toda fun\u00e7\u00e3o \u00e9 colocado no registrador %rax (ou uma de suas partes menores). Neste exemplo, a instru\u00e7\u00e3o usada foi o LEA que veremos na se\u00e7\u00e3o a seguir.","title":"Chamadas de fun\u00e7\u00f5es"},{"location":"aulas/06-condicionais-funcoes/#operacoes-aritmeticas-usando-lea","text":"Se usada de maneira literal, a instru\u00e7\u00e3o LEA (**L**oad **E**ffective **A**ddress) serve para calcular o endere\u00e7o de uma vari\u00e1vel local e \u00e9 equivalente ao operador & em C . Por\u00e9m, ela \u00e9 frequentemente \"abusada\" para fazer aritm\u00e9tica. Um ponto importante quando usamos LEA \u00e9 que todos os operandos s\u00e3o registradores de 64 bits. Regra geral Se LEA for usada com o registrador %rsp ent\u00e3o ela sempre representa o operador & Se os registradores envolvidos foram usados como n\u00fameros inteiros em instru\u00e7\u00f5es anteriores, ent\u00e3o ela representa uma conta com os valores dos registradores. Vejamos o exemplo da fun\u00e7\u00e3o exemplo1 acima: 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax No exemplo acima LEA \u00e9 usada para fazer aritm\u00e9tica. Sabemos disso pois, na chamada traduzida na parte anterior, elas recebem n\u00fameros inteiros ( %r9d = 6 e %ecx = 4 ). Seu primeiro argumento segue a seguinte l\u00f3gica C ( %R1 , %R2 , S ) C \u00e9 uma constante %R1 \u00e9 um registrador %R2 \u00e9 um registrador (pode ser igual a %R1 ) S \u00e9 1, 2, 4 ou 8 (todos os tamanhos poss\u00edveis de registradores inteiros) A opera\u00e7\u00e3o acima calcula C + %R1 + (%R2 * S) . A opera\u00e7\u00e3o LEA nunca acessa a mem\u00f3ria , apenas move o resultado deste c\u00e1lculo para o registrador destino. Qualquer outra opera\u00e7\u00e3o que use a sintaxa acima est\u00e1 fazendo um acesso a mem\u00f3ria. LEA \u00e9 a \u00fanica exce\u00e7\u00e3o! Question Traduza a opera\u00e7\u00e3o abaixo para C 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax Question Com estas informa\u00e7\u00f5es em m\u00e3os, traduza exemplo1 para C Dump of assembler code for function exemplo1 : 0 x064a <+ 0 > : add %esi , %edi 0 x064c <+ 2 > : add %edi , %edx 0 x064e <+ 4 > : add %edx , %ecx 0 x0650 <+ 6 > : add %r8d , %ecx 0 x0653 <+ 9 > : lea ( %rcx , %r9 , 1 ), %eax 0 x0657 <+ 13 > : retq Resposta Confira no arquivo exemplo1.c","title":"Opera\u00e7\u00f5es aritm\u00e9ticas usando LEA"},{"location":"aulas/06-condicionais-funcoes/#retorno-de-funcoes","text":"Vamos terminar nossa revis\u00e3o analisando novamente a chamada de exemplo1 no main : 0 x065c <+ 4 > : mov $0x6 , %r9d 0 x0662 <+ 10 > : mov $0x5 , %r8d 0 x0668 <+ 16 > : mov $0x4 , %ecx 0 x066d <+ 21 > : mov $0x3 , %edx 0 x0672 <+ 26 > : mov $0x2 , %esi 0 x0677 <+ 31 > : mov $0x1 , %edi 0 x067c <+ 36 > : callq 0x64a < exemplo1 > 0 x0681 <+ 41 > : lea 0xa ( %rax ), %esi Anteriormente j\u00e1 vimos que o call e os mov s acima fazem a chamada exemplo1(1,2,3,4,5,6) em C . A linha de baixo realiza uma opera\u00e7\u00e3o aritm\u00e9tica com %rax . Question Considerando que %rax armazena o valor de retorno de uma fun\u00e7\u00e3o, qual seria a tradu\u00e7\u00e3o para C do bloco de c\u00f3digo acima? Resposta int esi = exemplo1(1, 2, 3, 4, 5, 6) + 10;","title":"Retorno de fun\u00e7\u00f5es"},{"location":"aulas/06-condicionais-funcoes/#exercicios-combinados","text":"Warning Todos os exerc\u00edcios desta se\u00e7\u00e3o s\u00e3o para entrega. Voc\u00eas podem se conversar para faz\u00ea-los, mas cada um deve criar sua pr\u00f3pria solu\u00e7\u00e3o do zero. Todos os exerc\u00edcios j\u00e1 est\u00e3o dispon\u00edveis no reposit\u00f3rio template de entregas na pasta 03-condicionais-funcoes . Ver template em https://github.com/insper-classroom/21_2_sishard_entrega_atividades_template","title":"Exerc\u00edcios combinados"},{"location":"aulas/06-condicionais-funcoes/#arquivo-ex1-aritmetica-e-expressoes-booleanas","text":"Dump of assembler code for function ex1 : 0 x05fa <+ 0 > : lea ( %rdi , %rsi , 1 ), %rax 0 x05fe <+ 4 > : lea ( %rax , %rdx , 4 ), %rcx 0 x0602 <+ 8 > : imul %rdi , %rdi 0 x0606 <+ 12 > : lea ( %rdi , %rsi , 2 ), %rax 0 x060a <+ 16 > : add %rax , %rdx 0 x060d <+ 19 > : cmp %rdx , %rcx 0 x0610 <+ 22 > : setge %al 0 x0613 <+ 25 > : movzbl %al , %eax 0 x0616 <+ 28 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? Quais seus tipos? Declare a fun\u00e7\u00e3o abaixo. Question As instru\u00e7\u00f5es LEA acima representam opera\u00e7\u00f5es aritm\u00e9ticas ou a opera\u00e7\u00e3o endere\u00e7o de & ? Como voc\u00ea fez esta identifica\u00e7\u00e3o? . Question Traduza as opera\u00e7\u00f5es das linhas ex1+0 at\u00e9 ex1+12 para C Question Nas linhas ex1+19 e ex1+22 \u00e9 feita uma compara\u00e7\u00e3o. Qual e entre quais registradores? Onde \u00e9 armazenado este resultado? Question O qu\u00ea faz a instru\u00e7\u00e3o movzbl em ex1+25 ? Juntando com a resposta da pergunta acima, traduza as instru\u00e7\u00f5es ex1+19 at\u00e9 ex1+28 para C . Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes.","title":"Arquivo ex1: Aritm\u00e9tica e Express\u00f5es booleanas."},{"location":"aulas/06-condicionais-funcoes/#arquivo-ex2-chamadas-de-funcoes-e-condicionais","text":"Dump of assembler code for function ex2 : 0 x05ff <+ 0 > : push %rbx 0 x0600 <+ 1 > : mov %rdi , %rbx 0 x0603 <+ 4 > : mov %rsi , %rdi 0 x0606 <+ 7 > : callq 0x5fa < vezes2 > 0 x060b <+ 12 > : cmp %rbx , %rax 0 x060e <+ 15 > : jle 0x613 < ex2 + 20 > 0 x0610 <+ 17 > : add %rbx , %rbx 0 x0613 <+ 20 > : add %rbx , %rax 0 x0616 <+ 23 > : pop %rbx 0 x0617 <+ 24 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? Quais s\u00e3o seus tipos? Declare-a abaixo. Vamos come\u00e7ar trabalhando na linha ex2+7 , na instru\u00e7\u00e3o call vezes2 . A chamada necessita usar o registrador %rdi , mas ele cont\u00e9m o primeiro argumento de ex2 . Question Em qual registrador \u00e9 guardado o primeiro argumento de ex2 ? Isso \u00e9 feito antes da chamada call . Question Qual vari\u00e1vel \u00e9 passada como argumento para a fun\u00e7\u00e3o vezes2 ? Question Escreva abaixo a invoca\u00e7\u00e3o de vezes2 . Voc\u00ea deve ter notado as instru\u00e7\u00f5es push/pop %rbx no come\u00e7o/fim da fun\u00e7\u00e3o. Toda fun\u00e7\u00e3o pode usar os registradores de argumentos (vistos na parte 1) e o de valor de retorno como quiserem. Se precisarem mexer nos outros registradores a pr\u00e1tica \u00e9 salv\u00e1-los na pilha no come\u00e7o da fun\u00e7\u00e3o e restaur\u00e1-los no fim. Assim n\u00e3o importa o que a fun\u00e7\u00e3o fa\u00e7a, para a fun\u00e7\u00e3o chamadora \u00e9 como se n\u00e3o houvesse havido nenhuma modifica\u00e7\u00e3o nos outros registradores. Vamos agora olhar a condicional na linha ex2+12 . Question Ap\u00f3s a chamada call , qual o conte\u00fado de %rax ? Question Juntando suas respostas nas quest\u00f5es de cima, qual \u00e9 a compara\u00e7\u00e3o feita nas linhas ex2+12, ex2+15 ? Question Com essas informa\u00e7\u00f5es em m\u00e3os, fa\u00e7a uma tradu\u00e7\u00e3o do c\u00f3digo acima para C usando somente if+goto . Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes.","title":"Arquivo ex2: Chamadas de fun\u00e7\u00f5es e Condicionais."},{"location":"aulas/06-condicionais-funcoes/#arquivo-ex3-ponteiros-e-expressoes-booleanas","text":"Dump of assembler code for function ex3 : 0 x05fa <+ 0 > : cmp %rsi , %rdi 0 x05fd <+ 3 > : setl %al 0 x0600 <+ 6 > : movzbl %al , %eax 0 x0603 <+ 9 > : mov %eax ,( %rdx ) 0 x0605 <+ 11 > : cmp %rsi , %rdi 0 x0608 <+ 14 > : sete %al 0 x060b <+ 17 > : movzbl %al , %eax 0 x060e <+ 20 > : mov %eax ,( %rcx ) 0 x0610 <+ 22 > : cmp %rsi , %rdi 0 x0613 <+ 25 > : setg %al 0 x0616 <+ 28 > : movzbl %al , %eax 0 x0619 <+ 31 > : mov %eax ,( %r8 ) 0 x061c <+ 34 > : retq Question Quantos argumentos a fun\u00e7\u00e3o acima recebe? De quais tipos? Declare-a abaixo. Question A fun\u00e7\u00e3o acima faz v\u00e1rias compara\u00e7\u00f5es. Liste quais e entre quais argumentos. Question Onde \u00e9 armazenado o resultado de cada compara\u00e7\u00e3o? Question Com base em suas respostas acima, fa\u00e7a uma tradu\u00e7\u00e3o linha a linha da fun\u00e7\u00e3o acima. Example Usando as perguntas acima preencha o arquivo de solu\u00e7\u00e3o no reposit\u00f3rio e execute os testes.","title":"Arquivo ex3: Ponteiros e Express\u00f5es booleanas."}]}